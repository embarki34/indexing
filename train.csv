query_name,index_type,query,index_description,index_statement,execution_time,cpu_start,cpu_end,cpu_change,memory_start,memory_end,memory_change,result_count,select,insert,update,delete,create,drop,alter,join,where,group by,order by,having,limit,between,in,like,error,base_query
address_ending_hash,hash,"SELECT user_id, shipping_address FROM users WHERE shipping_address LIKE '%NY 10001';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0035195350646972,0.0,0.0,0.0,111.53515625,111.53515625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,,address_ending
address_search,gist,"SELECT user_id, first_name, last_name, shipping_address FROM users WHERE shipping_address ILIKE '%New York%';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0063381195068359,0.0,0.0,0.0,111.55078125,111.55078125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,,address_search
analytics_status_count_gist,gist,"SELECT COUNT(*) as order_count, status FROM Orders WHERE order_date BETWEEN '2017-01-01' AND '2025-06-30' GROUP BY status;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.038424015045166,0.0,0.0,0.0,98.2890625,98.2890625,0.0,4,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,,analytics_status_count
category_lookup_bitmap,bitmap,SELECT * FROM categories WHERE category_id = 5;,Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0014185905456542,0.0,0.0,0.0,93.5390625,93.5390625,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,category_lookup
category_performance_bitmap,bitmap,"SELECT c.name as category_name, DATE_TRUNC('month', o.order_date) as month, COUNT(DISTINCT o.order_id) as total_orders, SUM(oi.quantity) as items_sold, SUM(oi.quantity * oi.price) as revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY c.name, month ORDER BY c.name, month;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),1.522991418838501,0.0,0.0,0.0,80.4609375,80.47265625,0.01171875,2160,1,0,0,0,0,0,0,3,0,1,1,0,0,0,4,0,,category_performance
category_products_btree,btree,"SELECT p.product_id, p.name, p.price, p.stock_quantity, p.created_at FROM Products p WHERE p.category_id = 5 ORDER BY p.price ASC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0021924972534179,0.0,0.0,0.0,93.54296875,93.54296875,0.0,101,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,,category_products
complex_and_or_filter_btree,btree,"SELECT p.product_id, p.name, p.price, p.stock_quantity FROM Products p WHERE (p.category_id = 1 OR p.category_id = 2) AND (p.stock_quantity < 10 OR p.stock_quantity > 100);",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.001504898071289,0.0,0.0,0.0,98.296875,98.296875,0.0,182,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,complex_and_or_filter
complex_range_query_reverse,reverse,"SELECT order_id, user_id, order_date, shipping_address FROM Orders WHERE shipping_address ILIKE '%usa%';  -- Changed to ILIKE for case-insensitive substring search",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.1270642280578613,0.0,0.0,0.0,111.58203125,111.58203125,0.0,2436,1,0,0,0,0,0,0,0,1,0,0,0,0,0,4,2,,complex_range_query
customer_domain_analysis_btree,btree,"SELECT SUBSTRING(email FROM '@(.*)$') as email_domain, COUNT(*) as user_count, COUNT(DISTINCT o.order_id) as total_orders, SUM(o.total_amount) as total_revenue FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY email_domain ORDER BY user_count DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),1.3498022556304932,0.0,0.0,0.0,111.53515625,111.53515625,0.0,3,1,0,0,0,0,0,0,1,0,1,1,0,0,0,5,0,,customer_domain_analysis
customer_location_search,gist,"SELECT u.user_id, u.first_name, u.last_name, u.shipping_address, COUNT(o.order_id) as total_orders, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id WHERE u.shipping_address ILIKE '%California%' GROUP BY u.user_id, u.first_name, u.last_name, u.shipping_address;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0028150081634521,0.0,0.0,0.0,110.58203125,110.58203125,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,4,1,,customer_location_search
customer_order_trends_gist,gist,"SELECT u.user_id, DATE_TRUNC('month', o.order_date) as month, COUNT(o.order_id) as orders_per_month, AVG(o.total_amount) as avg_order_value, SUM(oi.quantity) as total_items FROM users u JOIN orders o ON u.user_id = o.user_id JOIN orderitems oi ON o.order_id = oi.order_id GROUP BY u.user_id, month ORDER BY u.user_id, month;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),1.3291075229644775,0.0,0.0,0.0,86.28125,197.46875,111.1875,276934,1,0,0,0,0,0,0,2,0,1,1,0,0,0,2,0,,customer_order_trends
customer_segmentation_gist,gist,"SELECT u.user_id, u.email, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value, EXTRACT(DAY FROM AGE(MAX(o.order_date), MIN(o.order_date))) / NULLIF(COUNT(o.order_id), 0) AS avg_days_between_orders, CASE WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'Premium' WHEN COUNT(o.order_id) > 5 AND SUM(o.total_amount) > 2000 THEN 'Gold' WHEN COUNT(o.order_id) > 2 AND SUM(o.total_amount) > 1000 THEN 'Silver' ELSE 'Bronze' END AS customer_segment, DENSE_RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank, MAX(o.order_date) AS last_order_date, EXTRACT(DAY FROM AGE(CURRENT_DATE, MAX(o.order_date))) AS days_since_last_order FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.4169578552246094,0.0,0.0,0.0,89.48828125,91.41015625,1.921875,10000,1,0,0,0,0,0,0,1,0,1,2,1,0,1,6,0,,customer_segmentation
customer_spending_gist,gist,"SELECT u.user_id, u.email, COUNT(o.order_id) as order_count, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email ORDER BY total_spent DESC NULLS LAST;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.1752772331237793,0.0,0.0,0.0,90.24609375,90.24609375,0.0,10000,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,,customer_spending
daily_order_lookup_btree,btree,"SELECT o.order_id, o.order_date, u.email, SUM(oi.quantity) as total_items, STRING_AGG(p.name, ', ') as products_ordered FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 5000 GROUP BY o.order_id, o.order_date, u.email;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0059030055999755,0.0,0.0,0.0,93.54296875,93.54296875,0.0,1,1,0,0,0,0,0,0,3,1,1,0,0,0,0,4,0,,daily_order_lookup
delivery_status_metrics_hash,hash,"SELECT status, COUNT(*) as order_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - order_date))/86400) as avg_days_in_status, MIN(total_amount) as min_order_value, MAX(total_amount) as max_order_value, AVG(total_amount) as avg_order_value FROM orders GROUP BY status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0917315483093261,0.0,0.0,0.0,98.30078125,98.30078125,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,,delivery_status_metrics
email_domain_search_bitmap,bitmap,"SELECT user_id, email, first_name, last_name FROM users WHERE email LIKE '%@gmail.com';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0031118392944335,0.0,0.0,0.0,111.55078125,111.55078125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,,email_domain_search
exact_email_match_bitmap,bitmap,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'newtontodd@example.net';  -- Changed to single quotes and removed extra wildcard",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0024118423461914,0.0,0.0,0.0,93.54296875,93.54296875,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,,exact_email_match
exact_order_lookup_btree,btree,"SELECT o.order_id, o.user_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) AS item_count, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.order_id = 12345 GROUP BY o.order_id, o.user_id, o.order_date, o.total_amount, u.email;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0016329288482666,0.0,0.0,0.0,93.53125,93.53125,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,2,0,,exact_order_lookup
exact_order_status_bitmap,bitmap,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Shipped';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.1487400531768798,0.0,0.0,0.0,95.22265625,122.94140625,27.71875,118505,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,exact_order_status
exact_product_match_btree,btree,"SELECT product_id, name, price FROM Products WHERE product_id = 5423;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0017905235290527,0.0,0.0,0.0,98.21875,98.21875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,exact_product_match
full_text_search_bitmap,bitmap,"SELECT product_id, name, description FROM Products WHERE to_tsvector('english', description) @@ to_tsquery('english', 'oil');",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.03883957862854,0.0,0.0,0.0,110.5859375,110.5859375,0.0,53,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,full_text_search
fuzzy_product_search,gist,"SELECT product_id, name, price FROM products WHERE name % 'wireless headphones';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0020270347595214,0.0,0.0,0.0,110.5859375,110.5859375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,fuzzy_product_search
join_exact_match_btree,btree,"SELECT o.order_id, o.order_date, p.name as product_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0022578239440917,0.0,0.0,0.0,98.21875,98.21875,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,,join_exact_match
monthly_order_status_hash,hash,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as orders FROM orders GROUP BY month, status ORDER BY month, status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.1090178489685058,0.0,0.0,0.0,98.30078125,98.30078125,0.0,432,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,,monthly_order_status
multi_column_category_price,btree,"SELECT p.product_id, p.name, p.price, c.name as category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id WHERE p.category_id = 3 AND p.price BETWEEN 20 AND 100 ORDER BY p.price;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0021247863769531,0.0,0.0,0.0,90.24609375,90.24609375,0.0,6,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,,multi_column_category_price
multi_table_query_gist,gist,"SELECT o.order_id, o.order_date, u.email FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE o.order_id = 45678;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.001422643661499,0.0,0.0,0.0,111.55078125,111.55078125,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,,multi_table_query
multiple_status_or_gist,gist,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.2923862934112549,0.0,0.0,0.0,103.171875,164.37109375,61.19921875,237361,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,,multiple_status_or
numeric_id_query_gist,gist,"SELECT user_id, first_name, last_name, email FROM Users WHERE user_id = 1233;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0017042160034179,0.0,0.0,0.0,111.55078125,111.55078125,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,numeric_id_query
order_details_btree,btree,"SELECT o.order_id, o.order_date, oi.product_id, p.name as product_name, oi.quantity, oi.price FROM orders o JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0024192333221435,0.0,0.0,0.0,98.21875,98.21875,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,,order_details
order_history,btree,"SELECT o.order_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) as items_count FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, o.total_amount, u.email ORDER BY o.order_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.1464934349060058,0.0,0.0,0.0,90.25390625,97.87109375,7.6171875,34379,1,0,0,0,0,0,0,2,1,1,1,0,0,1,2,0,,order_history
order_status_analysis_gist,gist,"SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS average_order_value, MIN(order_date) AS earliest_order, MAX(order_date) AS latest_order FROM Orders WHERE status IN ('Pending', 'Shipped', 'Delivered') AND order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY status ORDER BY order_count DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.016937255859375,0.0,0.0,0.0,104.625,104.625,0.0,3,1,0,0,0,0,0,0,0,1,1,1,0,0,1,3,0,,order_status_analysis
order_status_by_month_btree,btree,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as order_count, SUM(total_amount) as total_revenue, AVG(total_amount) as avg_order_value FROM orders WHERE status IN ('Pending', 'Shipped', 'Delivered') GROUP BY month, status ORDER BY month DESC, status;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.1246912479400634,0.0,0.0,0.0,104.625,104.625,0.0,324,1,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,,order_status_by_month
order_status_query,bitmap,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Delivered';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.1457626819610595,0.0,0.0,0.0,104.625,125.96875,21.34375,118757,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,order_status_query
order_status_summary_reverse,reverse,"SELECT status, COUNT(*) as order_count, SUM(total_amount) as total_revenue FROM orders GROUP BY status ORDER BY order_count DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0439643859863281,0.0,0.0,0.0,110.9453125,110.9453125,0.0,4,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,,order_status_summary
phone_area_code_hash,hash,"SELECT user_id, phone_number, email FROM users WHERE phone_number LIKE '212%';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0022284984588623,0.0,0.0,0.0,111.55078125,111.55078125,0.0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,,phone_area_code
prefix_email_match_gist,gist,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'john%';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0025734901428222,0.0,0.0,0.0,92.453125,92.453125,0.0,123,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,,prefix_email_match
price_range_products_hash,hash,"SELECT p.name, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 100 AND 500 ORDER BY p.price;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0030620098114013,0.0,0.0,0.0,92.5234375,92.5234375,0.0,785,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,,price_range_products
product_description_search_btree,btree,"SELECT p.product_id, p.name, p.description, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.description ILIKE '%premium%' OR p.description ILIKE '%quality%' ORDER BY p.price DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0085384845733642,0.0,0.0,0.0,110.5859375,110.5859375,0.0,46,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,,product_description_search
product_details_btree,btree,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name AS category_name, COUNT(DISTINCT oi.order_id) AS times_ordered, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.product_id = 1502 GROUP BY p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0038819313049316,0.0,0.0,0.0,98.21875,98.21875,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,3,0,,product_details
product_info_gist,gist,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id = 100;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0019819736480712,0.0,0.0,0.0,98.21875,98.21875,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,,product_info
product_model_search_gist,gist,"SELECT p.product_id, p.name, p.price, p.stock_quantity, COUNT(oi.order_item_id) as times_ordered FROM products p LEFT JOIN orderitems oi ON p.product_id = oi.product_id WHERE p.name LIKE '% 2023' GROUP BY p.product_id, p.name, p.price, p.stock_quantity;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.002087116241455,0.0,0.0,0.0,111.55078125,111.55078125,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,,product_model_search
product_name_suffix,reverse,"SELECT product_id, name, price FROM products WHERE name LIKE '%Pro';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0018684864044189,0.0,0.0,0.0,111.55078125,111.55078125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,,product_name_suffix
product_performance_analysis_gist,gist,"SELECT p.product_id, p.name, c.name AS category_name, SUM(oi.quantity) AS total_units_sold, SUM(oi.quantity * oi.price) AS total_revenue, AVG(oi.price) AS avg_selling_price, COUNT(DISTINCT o.order_id) AS appearance_in_orders, COUNT(DISTINCT o.user_id) AS unique_customers, SUM(oi.quantity) / COUNT(DISTINCT o.order_id) AS avg_quantity_per_order, SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) AS cancelled_units, (SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) / NULLIF(SUM(oi.quantity), 0)) * 100 AS cancellation_rate, RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(oi.quantity) DESC) AS rank_in_category, PERCENT_RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) AS percentile_rank_overall FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, c.name, c.category_id ORDER BY total_revenue DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),2.467996835708618,0.0,0.0,0.0,111.53515625,111.53515625,0.0,2000,1,0,0,0,0,0,0,3,0,1,3,0,0,0,9,0,,product_performance_analysis
product_performance_pivot_gist,gist,"SELECT p.product_id, p.name, c.name AS category_name, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 1 THEN oi.quantity ELSE 0 END) AS Jan_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 2 THEN oi.quantity ELSE 0 END) AS Feb_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 3 THEN oi.quantity ELSE 0 END) AS Mar_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 4 THEN oi.quantity ELSE 0 END) AS Apr_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 5 THEN oi.quantity ELSE 0 END) AS May_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 6 THEN oi.quantity ELSE 0 END) AS Jun_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 7 THEN oi.quantity ELSE 0 END) AS Jul_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 8 THEN oi.quantity ELSE 0 END) AS Aug_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 9 THEN oi.quantity ELSE 0 END) AS Sep_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 10 THEN oi.quantity ELSE 0 END) AS Oct_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 11 THEN oi.quantity ELSE 0 END) AS Nov_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 12 THEN oi.quantity ELSE 0 END) AS Dec_Sales, SUM(oi.quantity) AS Total_Sales, SUM(oi.quantity * oi.price) AS Total_Revenue FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.product_id, p.name, c.name ORDER BY Total_Revenue DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),2.157524585723877,0.0,0.0,0.0,93.171875,93.171875,0.0,2000,1,0,0,0,0,0,0,3,0,1,1,0,0,0,3,0,,product_performance_pivot
product_price_changes,btree,"SELECT p1.product_id, p1.name, p1.price as current_price, COUNT(DISTINCT o.order_id) as total_orders, MIN(oi.price) as min_sold_price, MAX(oi.price) as max_sold_price FROM products p1 LEFT JOIN orderitems oi ON p1.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id GROUP BY p1.product_id, p1.name, p1.price HAVING p1.price > AVG(oi.price) ORDER BY p1.price DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),1.627718448638916,0.0,0.0,0.0,93.17578125,93.17578125,0.0,0,1,0,0,0,0,0,0,2,0,1,1,1,0,0,6,0,,product_price_changes
product_sales_ranking_hash,hash,"SELECT p.product_id, p.name, SUM(oi.quantity) as total_sold, SUM(oi.quantity * oi.price) as total_revenue, RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) as revenue_rank FROM products p JOIN orderitems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.2204573154449463,0.0,0.0,0.0,93.1796875,93.1796875,0.0,2000,1,0,0,0,0,0,0,1,0,1,2,0,0,0,1,0,,product_sales_ranking
product_search_hash,hash,"SELECT product_id, name, description, price FROM products WHERE name ILIKE '%wireless%' OR description ILIKE '%wireless%';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0059335231781005,0.0,0.0,0.0,110.5859375,110.5859375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,,product_search
product_stock_analysis,bitmap,"SELECT c.name as category, CASE WHEN p.stock_quantity = 0 THEN 'Out of Stock' WHEN p.stock_quantity <= 10 THEN 'Critical' WHEN p.stock_quantity <= 50 THEN 'Low' WHEN p.stock_quantity <= 100 THEN 'Medium' ELSE 'High' END as stock_level, COUNT(*) as product_count, SUM(p.stock_quantity) as total_stock FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY c.name, stock_level ORDER BY c.name, stock_level;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0034224987030029,0.0,0.0,0.0,111.53515625,111.53515625,0.0,77,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,,product_stock_analysis
range_id_query_gist,gist,"SELECT order_id, order_date, status FROM Orders WHERE order_id BETWEEN 5000 AND 5100;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0018973350524902,0.0,0.0,0.0,111.55078125,111.55078125,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,,range_id_query
range_product_price_hash,hash,"SELECT product_id, name, price FROM Products WHERE price BETWEEN 50 AND 150 ORDER BY price;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0026328563690185,0.0,0.0,0.0,93.1796875,93.1796875,0.0,208,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,,range_product_price
range_sort_order_date,btree,"SELECT order_id, user_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.021646499633789,0.0,0.0,0.0,93.1796875,93.51171875,0.33203125,8775,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,,range_sort_order_date
similar_category_products_hash,hash,"SELECT DISTINCT p1.name as product1, p2.name as product2, p1.price as price1, p2.price as price2, similarity(p1.name, p2.name) as name_similarity FROM products p1 JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id WHERE similarity(p1.name, p2.name) > 0.4 ORDER BY name_similarity DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.1330699920654297,0.0,0.0,0.0,110.5859375,110.5859375,0.0,47,1,0,0,0,0,0,0,1,1,0,1,0,0,0,2,0,,similar_category_products
similar_products_btree,btree,"SELECT p1.product_id, p1.name, p1.description FROM products p1, products p2 WHERE p1.product_id != p2.product_id AND similarity(p1.name, p2.name) > 0.3 ORDER BY similarity(p1.name, p2.name) DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),4.7424845695495605,0.0,0.0,0.0,110.984375,110.984375,0.0,3848,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,,similar_products
specific_product_orders_btree,btree,"SELECT p.product_id, p.name, o.order_date, u.email as customer_email, oi.quantity, oi.price as sold_price FROM products p JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.product_id = 123;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0112559795379638,0.0,0.0,0.0,98.2890625,98.2890625,0.0,735,1,0,0,0,0,0,0,3,1,0,0,0,0,0,3,0,,specific_product_orders
stock_status_reverse,reverse,"SELECT CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity < 50 THEN 'Medium Stock' ELSE 'Well Stocked' END as stock_status, COUNT(*) as product_count FROM products GROUP BY stock_status;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0025451183319091,0.0,0.0,0.0,111.53515625,111.53515625,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,,stock_status
timestamp_query_btree,btree,"SELECT order_id, user_id, order_date, status FROM Orders WHERE order_date = '2024-03-15';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0052587985992431,0.0,0.0,0.0,111.55078125,111.55078125,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,timestamp_query
trigram_match_hash,hash,"select * from (SELECT product_id, name, description FROM Products WHERE 'heavy' % name) pind;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.003610610961914,0.0,0.0,0.0,110.9765625,110.9765625,0.0,3,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,,trigram_match
user_last_order_btree,btree,"SELECT u.user_id, u.email, o.order_id, o.order_date, o.total_amount FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 789 ORDER BY o.order_date DESC LIMIT 1;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0039801597595214,0.0,0.0,0.0,98.2890625,98.2890625,0.0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,,user_last_order
user_lookup_btree,btree,"SELECT u.user_id, u.email, u.first_name, u.last_name, u.phone_number FROM users u WHERE u.email = 'customer@example.com';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0027389526367187,0.0,0.0,0.0,98.2890625,98.2890625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,,user_lookup
user_orders_btree,btree,"SELECT u.user_id, u.first_name, u.last_name, u.email, o.order_id, o.order_date, o.total_amount, o.status FROM Users u JOIN Orders o ON u.user_id = o.user_id WHERE u.user_id = 5001 ORDER BY o.order_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0038716793060302,0.0,0.0,0.0,98.2890625,98.2890625,0.0,48,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,,user_orders
