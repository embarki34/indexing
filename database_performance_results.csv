query_name,index_type,query,index_description,index_statement,execution_time,cpu_start,cpu_end,cpu_change,memory_start,memory_end,memory_change,result_count,select,insert,update,delete,create,drop,alter,join,where,group by,order by,having,limit,between,in,like,error
category_performance,btree,"SELECT c.name as category_name, DATE_TRUNC('month', o.order_date) as month, COUNT(DISTINCT o.order_id) as total_orders, SUM(oi.quantity) as items_sold, SUM(oi.quantity * oi.price) as revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY c.name, month ORDER BY c.name, month;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),1.902515172958374,0.0,0.0,0.0,79.37109375,80.515625,1.14453125,2160,1,0,0,0,0,0,0,3,0,1,1,0,0,0,4,0,
category_performance_hash,hash,"SELECT c.name as category_name, DATE_TRUNC('month', o.order_date) as month, COUNT(DISTINCT o.order_id) as total_orders, SUM(oi.quantity) as items_sold, SUM(oi.quantity * oi.price) as revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY c.name, month ORDER BY c.name, month;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),1.6267788410186768,0.0,0.0,0.0,80.515625,80.52734375,0.01171875,2160,1,0,0,0,0,0,0,3,0,1,1,0,0,0,4,0,
category_performance_bitmap,bitmap,"SELECT c.name as category_name, DATE_TRUNC('month', o.order_date) as month, COUNT(DISTINCT o.order_id) as total_orders, SUM(oi.quantity) as items_sold, SUM(oi.quantity * oi.price) as revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY c.name, month ORDER BY c.name, month;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),1.6174604892730713,0.0,0.0,0.0,80.52734375,80.5390625,0.01171875,2160,1,0,0,0,0,0,0,3,0,1,1,0,0,0,4,0,
category_performance_gist,gist,"SELECT c.name as category_name, DATE_TRUNC('month', o.order_date) as month, COUNT(DISTINCT o.order_id) as total_orders, SUM(oi.quantity) as items_sold, SUM(oi.quantity * oi.price) as revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY c.name, month ORDER BY c.name, month;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),1.6198430061340332,0.0,0.0,0.0,80.54296875,80.55859375,0.015625,2160,1,0,0,0,0,0,0,3,0,1,1,0,0,0,4,0,
category_performance_reverse,reverse,"SELECT c.name as category_name, DATE_TRUNC('month', o.order_date) as month, COUNT(DISTINCT o.order_id) as total_orders, SUM(oi.quantity) as items_sold, SUM(oi.quantity * oi.price) as revenue FROM categories c JOIN products p ON c.category_id = p.category_id JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY c.name, month ORDER BY c.name, month;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),1.5181467533111572,0.0,0.0,0.0,80.55859375,80.5703125,0.01171875,2160,1,0,0,0,0,0,0,3,0,1,1,0,0,0,4,0,
customer_order_trends,btree,"SELECT u.user_id, DATE_TRUNC('month', o.order_date) as month, COUNT(o.order_id) as orders_per_month, AVG(o.total_amount) as avg_order_value, SUM(oi.quantity) as total_items FROM users u JOIN orders o ON u.user_id = o.user_id JOIN orderitems oi ON o.order_id = oi.order_id GROUP BY u.user_id, month ORDER BY u.user_id, month;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),1.4362022876739502,0.0,0.0,0.0,80.5703125,197.61328125,117.04296875,276934,1,0,0,0,0,0,0,2,0,1,1,0,0,0,2,0,
customer_order_trends_hash,hash,"SELECT u.user_id, DATE_TRUNC('month', o.order_date) as month, COUNT(o.order_id) as orders_per_month, AVG(o.total_amount) as avg_order_value, SUM(oi.quantity) as total_items FROM users u JOIN orders o ON u.user_id = o.user_id JOIN orderitems oi ON o.order_id = oi.order_id GROUP BY u.user_id, month ORDER BY u.user_id, month;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),1.4121665954589844,0.0,0.0,0.0,83.3359375,197.34765625,114.01171875,276934,1,0,0,0,0,0,0,2,0,1,1,0,0,0,2,0,
customer_order_trends_bitmap,bitmap,"SELECT u.user_id, DATE_TRUNC('month', o.order_date) as month, COUNT(o.order_id) as orders_per_month, AVG(o.total_amount) as avg_order_value, SUM(oi.quantity) as total_items FROM users u JOIN orders o ON u.user_id = o.user_id JOIN orderitems oi ON o.order_id = oi.order_id GROUP BY u.user_id, month ORDER BY u.user_id, month;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),1.3443491458892822,0.0,0.0,0.0,85.234375,197.359375,112.125,276934,1,0,0,0,0,0,0,2,0,1,1,0,0,0,2,0,
customer_order_trends_gist,gist,"SELECT u.user_id, DATE_TRUNC('month', o.order_date) as month, COUNT(o.order_id) as orders_per_month, AVG(o.total_amount) as avg_order_value, SUM(oi.quantity) as total_items FROM users u JOIN orders o ON u.user_id = o.user_id JOIN orderitems oi ON o.order_id = oi.order_id GROUP BY u.user_id, month ORDER BY u.user_id, month;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),1.433295488357544,0.0,0.0,0.0,86.703125,197.6875,110.984375,276934,1,0,0,0,0,0,0,2,0,1,1,0,0,0,2,0,
customer_order_trends_reverse,reverse,"SELECT u.user_id, DATE_TRUNC('month', o.order_date) as month, COUNT(o.order_id) as orders_per_month, AVG(o.total_amount) as avg_order_value, SUM(oi.quantity) as total_items FROM users u JOIN orders o ON u.user_id = o.user_id JOIN orderitems oi ON o.order_id = oi.order_id GROUP BY u.user_id, month ORDER BY u.user_id, month;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),1.6573667526245117,0.0,0.0,0.0,87.0234375,197.42578125,110.40234375,276934,1,0,0,0,0,0,0,2,0,1,1,0,0,0,2,0,
customer_segmentation,btree,"SELECT u.user_id, u.email, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value, EXTRACT(DAY FROM AGE(MAX(o.order_date), MIN(o.order_date))) / NULLIF(COUNT(o.order_id), 0) AS avg_days_between_orders, CASE WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'Premium' WHEN COUNT(o.order_id) > 5 AND SUM(o.total_amount) > 2000 THEN 'Gold' WHEN COUNT(o.order_id) > 2 AND SUM(o.total_amount) > 1000 THEN 'Silver' ELSE 'Bronze' END AS customer_segment, DENSE_RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank, MAX(o.order_date) AS last_order_date, EXTRACT(DAY FROM AGE(CURRENT_DATE, MAX(o.order_date))) AS days_since_last_order FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.513035774230957,0.0,0.0,0.0,88.3125,91.22265625,2.91015625,10000,1,0,0,0,0,0,0,1,0,1,2,1,0,1,6,0,
customer_segmentation_hash,hash,"SELECT u.user_id, u.email, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value, EXTRACT(DAY FROM AGE(MAX(o.order_date), MIN(o.order_date))) / NULLIF(COUNT(o.order_id), 0) AS avg_days_between_orders, CASE WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'Premium' WHEN COUNT(o.order_id) > 5 AND SUM(o.total_amount) > 2000 THEN 'Gold' WHEN COUNT(o.order_id) > 2 AND SUM(o.total_amount) > 1000 THEN 'Silver' ELSE 'Bronze' END AS customer_segment, DENSE_RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank, MAX(o.order_date) AS last_order_date, EXTRACT(DAY FROM AGE(CURRENT_DATE, MAX(o.order_date))) AS days_since_last_order FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.4481985569000244,0.0,0.0,0.0,89.3671875,91.4375,2.0703125,10000,1,0,0,0,0,0,0,1,0,1,2,1,0,1,6,0,
customer_segmentation_bitmap,bitmap,"SELECT u.user_id, u.email, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value, EXTRACT(DAY FROM AGE(MAX(o.order_date), MIN(o.order_date))) / NULLIF(COUNT(o.order_id), 0) AS avg_days_between_orders, CASE WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'Premium' WHEN COUNT(o.order_id) > 5 AND SUM(o.total_amount) > 2000 THEN 'Gold' WHEN COUNT(o.order_id) > 2 AND SUM(o.total_amount) > 1000 THEN 'Silver' ELSE 'Bronze' END AS customer_segment, DENSE_RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank, MAX(o.order_date) AS last_order_date, EXTRACT(DAY FROM AGE(CURRENT_DATE, MAX(o.order_date))) AS days_since_last_order FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.42388463020324707,0.0,0.0,0.0,89.43359375,91.62109375,2.1875,10000,1,0,0,0,0,0,0,1,0,1,2,1,0,1,6,0,
customer_segmentation_gist,gist,"SELECT u.user_id, u.email, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value, EXTRACT(DAY FROM AGE(MAX(o.order_date), MIN(o.order_date))) / NULLIF(COUNT(o.order_id), 0) AS avg_days_between_orders, CASE WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'Premium' WHEN COUNT(o.order_id) > 5 AND SUM(o.total_amount) > 2000 THEN 'Gold' WHEN COUNT(o.order_id) > 2 AND SUM(o.total_amount) > 1000 THEN 'Silver' ELSE 'Bronze' END AS customer_segment, DENSE_RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank, MAX(o.order_date) AS last_order_date, EXTRACT(DAY FROM AGE(CURRENT_DATE, MAX(o.order_date))) AS days_since_last_order FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.471083402633667,0.0,0.0,0.0,89.62890625,91.5625,1.93359375,10000,1,0,0,0,0,0,0,1,0,1,2,1,0,1,6,0,
customer_segmentation_reverse,reverse,"SELECT u.user_id, u.email, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value, EXTRACT(DAY FROM AGE(MAX(o.order_date), MIN(o.order_date))) / NULLIF(COUNT(o.order_id), 0) AS avg_days_between_orders, CASE WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'Premium' WHEN COUNT(o.order_id) > 5 AND SUM(o.total_amount) > 2000 THEN 'Gold' WHEN COUNT(o.order_id) > 2 AND SUM(o.total_amount) > 1000 THEN 'Silver' ELSE 'Bronze' END AS customer_segment, DENSE_RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank, MAX(o.order_date) AS last_order_date, EXTRACT(DAY FROM AGE(CURRENT_DATE, MAX(o.order_date))) AS days_since_last_order FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.4434843063354492,0.0,0.0,0.0,89.875,91.609375,1.734375,10000,1,0,0,0,0,0,0,1,0,1,2,1,0,1,6,0,
customer_spending,btree,"SELECT u.user_id, u.email, COUNT(o.order_id) as order_count, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email ORDER BY total_spent DESC NULLS LAST;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.2700929641723633,0.0,0.0,0.0,89.6796875,90.1328125,0.453125,10000,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
customer_spending_hash,hash,"SELECT u.user_id, u.email, COUNT(o.order_id) as order_count, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email ORDER BY total_spent DESC NULLS LAST;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.19585037231445312,0.0,0.0,0.0,90.1328125,90.1328125,0.0,10000,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
customer_spending_bitmap,bitmap,"SELECT u.user_id, u.email, COUNT(o.order_id) as order_count, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email ORDER BY total_spent DESC NULLS LAST;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.19056344032287598,0.0,0.0,0.0,90.1328125,90.1328125,0.0,10000,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
customer_spending_gist,gist,"SELECT u.user_id, u.email, COUNT(o.order_id) as order_count, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email ORDER BY total_spent DESC NULLS LAST;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.1921994686126709,0.0,0.0,0.0,90.1328125,90.1328125,0.0,10000,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
customer_spending_reverse,reverse,"SELECT u.user_id, u.email, COUNT(o.order_id) as order_count, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.email ORDER BY total_spent DESC NULLS LAST;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.17722582817077637,0.0,0.0,0.0,90.1328125,90.1328125,0.0,10000,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
multi_column_category_price,btree,"SELECT p.product_id, p.name, p.price, c.name as category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id WHERE p.category_id = 3 AND p.price BETWEEN 20 AND 100 ORDER BY p.price;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.005649566650390625,0.0,0.0,0.0,90.1328125,90.1328125,0.0,6,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
multi_column_category_price_hash,hash,"SELECT p.product_id, p.name, p.price, c.name as category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id WHERE p.category_id = 3 AND p.price BETWEEN 20 AND 100 ORDER BY p.price;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.003271818161010742,0.0,0.0,0.0,90.1328125,90.13671875,0.00390625,6,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
multi_column_category_price_bitmap,bitmap,"SELECT p.product_id, p.name, p.price, c.name as category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id WHERE p.category_id = 3 AND p.price BETWEEN 20 AND 100 ORDER BY p.price;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0033111572265625,0.0,0.0,0.0,90.13671875,90.13671875,0.0,6,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
multi_column_category_price_gist,gist,"SELECT p.product_id, p.name, p.price, c.name as category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id WHERE p.category_id = 3 AND p.price BETWEEN 20 AND 100 ORDER BY p.price;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.005594491958618164,0.0,0.0,0.0,90.13671875,90.13671875,0.0,6,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
multi_column_category_price_reverse,reverse,"SELECT p.product_id, p.name, p.price, c.name as category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id WHERE p.category_id = 3 AND p.price BETWEEN 20 AND 100 ORDER BY p.price;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0021932125091552734,0.0,0.0,0.0,90.13671875,90.13671875,0.0,6,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
order_history,btree,"SELECT o.order_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) as items_count FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, o.total_amount, u.email ORDER BY o.order_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.15026211738586426,0.0,0.0,0.0,90.13671875,97.890625,7.75390625,34379,1,0,0,0,0,0,0,2,1,1,1,0,0,1,2,0,
order_history_hash,hash,"SELECT o.order_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) as items_count FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, o.total_amount, u.email ORDER BY o.order_date DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.1525118350982666,0.0,0.0,0.0,91.51171875,97.92578125,6.4140625,34379,1,0,0,0,0,0,0,2,1,1,1,0,0,1,2,0,
order_history_bitmap,bitmap,"SELECT o.order_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) as items_count FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, o.total_amount, u.email ORDER BY o.order_date DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.17143559455871582,0.0,0.0,0.0,92.515625,98.17578125,5.66015625,34379,1,0,0,0,0,0,0,2,1,1,1,0,0,1,2,0,
order_history_gist,gist,"SELECT o.order_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) as items_count FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, o.total_amount, u.email ORDER BY o.order_date DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.1482524871826172,0.0,0.0,0.0,91.8984375,97.71875,5.8203125,34379,1,0,0,0,0,0,0,2,1,1,1,0,0,1,2,0,
order_history_reverse,reverse,"SELECT o.order_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) as items_count FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, o.total_amount, u.email ORDER BY o.order_date DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.17093753814697266,0.0,0.0,0.0,91.58203125,97.57421875,5.9921875,34379,1,0,0,0,0,0,0,2,1,1,1,0,0,1,2,0,
prefix_email_match,btree,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'john%';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0034475326538085938,0.0,0.0,0.0,92.53515625,92.53515625,0.0,123,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
prefix_email_match_hash,hash,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'john%';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.01135396957397461,0.0,0.0,0.0,92.53515625,92.53515625,0.0,123,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
prefix_email_match_bitmap,bitmap,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'john%';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.002638101577758789,0.0,0.0,0.0,92.53515625,92.53515625,0.0,123,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
prefix_email_match_gist,gist,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'john%';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.007632017135620117,0.0,0.0,0.0,92.53515625,92.53515625,0.0,123,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
prefix_email_match_reverse,reverse,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'john%';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0026993751525878906,0.0,0.0,0.0,92.53515625,92.53515625,0.0,123,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
price_range_products,btree,"SELECT p.name, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 100 AND 500 ORDER BY p.price;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0035943984985351562,0.0,0.0,0.0,92.53515625,92.5390625,0.00390625,785,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
price_range_products_hash,hash,"SELECT p.name, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 100 AND 500 ORDER BY p.price;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.008535623550415039,0.0,0.0,0.0,92.5390625,92.5390625,0.0,785,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
price_range_products_bitmap,bitmap,"SELECT p.name, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 100 AND 500 ORDER BY p.price;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.007091045379638672,0.0,0.0,0.0,92.5390625,92.5390625,0.0,785,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
price_range_products_gist,gist,"SELECT p.name, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 100 AND 500 ORDER BY p.price;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.006475210189819336,0.0,0.0,0.0,92.484375,92.484375,0.0,785,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
price_range_products_reverse,reverse,"SELECT p.name, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 100 AND 500 ORDER BY p.price;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0057833194732666016,0.0,0.0,0.0,92.484375,92.484375,0.0,785,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,
product_performance_pivot,btree,"SELECT p.product_id, p.name, c.name AS category_name, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 1 THEN oi.quantity ELSE 0 END) AS Jan_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 2 THEN oi.quantity ELSE 0 END) AS Feb_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 3 THEN oi.quantity ELSE 0 END) AS Mar_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 4 THEN oi.quantity ELSE 0 END) AS Apr_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 5 THEN oi.quantity ELSE 0 END) AS May_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 6 THEN oi.quantity ELSE 0 END) AS Jun_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 7 THEN oi.quantity ELSE 0 END) AS Jul_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 8 THEN oi.quantity ELSE 0 END) AS Aug_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 9 THEN oi.quantity ELSE 0 END) AS Sep_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 10 THEN oi.quantity ELSE 0 END) AS Oct_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 11 THEN oi.quantity ELSE 0 END) AS Nov_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 12 THEN oi.quantity ELSE 0 END) AS Dec_Sales, SUM(oi.quantity) AS Total_Sales, SUM(oi.quantity * oi.price) AS Total_Revenue FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.product_id, p.name, c.name ORDER BY Total_Revenue DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),2.2935001850128174,0.0,0.0,0.0,92.484375,93.2421875,0.7578125,2000,1,0,0,0,0,0,0,3,0,1,1,0,0,0,3,0,
product_performance_pivot_hash,hash,"SELECT p.product_id, p.name, c.name AS category_name, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 1 THEN oi.quantity ELSE 0 END) AS Jan_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 2 THEN oi.quantity ELSE 0 END) AS Feb_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 3 THEN oi.quantity ELSE 0 END) AS Mar_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 4 THEN oi.quantity ELSE 0 END) AS Apr_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 5 THEN oi.quantity ELSE 0 END) AS May_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 6 THEN oi.quantity ELSE 0 END) AS Jun_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 7 THEN oi.quantity ELSE 0 END) AS Jul_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 8 THEN oi.quantity ELSE 0 END) AS Aug_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 9 THEN oi.quantity ELSE 0 END) AS Sep_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 10 THEN oi.quantity ELSE 0 END) AS Oct_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 11 THEN oi.quantity ELSE 0 END) AS Nov_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 12 THEN oi.quantity ELSE 0 END) AS Dec_Sales, SUM(oi.quantity) AS Total_Sales, SUM(oi.quantity * oi.price) AS Total_Revenue FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.product_id, p.name, c.name ORDER BY Total_Revenue DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),2.231138229370117,0.0,0.0,0.0,93.2421875,93.2421875,0.0,2000,1,0,0,0,0,0,0,3,0,1,1,0,0,0,3,0,
product_performance_pivot_bitmap,bitmap,"SELECT p.product_id, p.name, c.name AS category_name, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 1 THEN oi.quantity ELSE 0 END) AS Jan_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 2 THEN oi.quantity ELSE 0 END) AS Feb_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 3 THEN oi.quantity ELSE 0 END) AS Mar_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 4 THEN oi.quantity ELSE 0 END) AS Apr_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 5 THEN oi.quantity ELSE 0 END) AS May_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 6 THEN oi.quantity ELSE 0 END) AS Jun_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 7 THEN oi.quantity ELSE 0 END) AS Jul_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 8 THEN oi.quantity ELSE 0 END) AS Aug_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 9 THEN oi.quantity ELSE 0 END) AS Sep_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 10 THEN oi.quantity ELSE 0 END) AS Oct_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 11 THEN oi.quantity ELSE 0 END) AS Nov_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 12 THEN oi.quantity ELSE 0 END) AS Dec_Sales, SUM(oi.quantity) AS Total_Sales, SUM(oi.quantity * oi.price) AS Total_Revenue FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.product_id, p.name, c.name ORDER BY Total_Revenue DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),2.2176249027252197,0.0,0.0,0.0,93.2421875,93.2421875,0.0,2000,1,0,0,0,0,0,0,3,0,1,1,0,0,0,3,0,
product_performance_pivot_gist,gist,"SELECT p.product_id, p.name, c.name AS category_name, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 1 THEN oi.quantity ELSE 0 END) AS Jan_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 2 THEN oi.quantity ELSE 0 END) AS Feb_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 3 THEN oi.quantity ELSE 0 END) AS Mar_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 4 THEN oi.quantity ELSE 0 END) AS Apr_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 5 THEN oi.quantity ELSE 0 END) AS May_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 6 THEN oi.quantity ELSE 0 END) AS Jun_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 7 THEN oi.quantity ELSE 0 END) AS Jul_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 8 THEN oi.quantity ELSE 0 END) AS Aug_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 9 THEN oi.quantity ELSE 0 END) AS Sep_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 10 THEN oi.quantity ELSE 0 END) AS Oct_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 11 THEN oi.quantity ELSE 0 END) AS Nov_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 12 THEN oi.quantity ELSE 0 END) AS Dec_Sales, SUM(oi.quantity) AS Total_Sales, SUM(oi.quantity * oi.price) AS Total_Revenue FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.product_id, p.name, c.name ORDER BY Total_Revenue DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),2.2009198665618896,0.0,0.0,0.0,93.2421875,93.2421875,0.0,2000,1,0,0,0,0,0,0,3,0,1,1,0,0,0,3,0,
product_performance_pivot_reverse,reverse,"SELECT p.product_id, p.name, c.name AS category_name, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 1 THEN oi.quantity ELSE 0 END) AS Jan_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 2 THEN oi.quantity ELSE 0 END) AS Feb_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 3 THEN oi.quantity ELSE 0 END) AS Mar_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 4 THEN oi.quantity ELSE 0 END) AS Apr_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 5 THEN oi.quantity ELSE 0 END) AS May_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 6 THEN oi.quantity ELSE 0 END) AS Jun_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 7 THEN oi.quantity ELSE 0 END) AS Jul_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 8 THEN oi.quantity ELSE 0 END) AS Aug_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 9 THEN oi.quantity ELSE 0 END) AS Sep_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 10 THEN oi.quantity ELSE 0 END) AS Oct_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 11 THEN oi.quantity ELSE 0 END) AS Nov_Sales, SUM(CASE WHEN EXTRACT(MONTH FROM o.order_date) = 12 THEN oi.quantity ELSE 0 END) AS Dec_Sales, SUM(oi.quantity) AS Total_Sales, SUM(oi.quantity * oi.price) AS Total_Revenue FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.product_id, p.name, c.name ORDER BY Total_Revenue DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),2.2396955490112305,0.0,0.0,0.0,93.2421875,93.2421875,0.0,2000,1,0,0,0,0,0,0,3,0,1,1,0,0,0,3,0,
product_price_changes,btree,"SELECT p1.product_id, p1.name, p1.price as current_price, COUNT(DISTINCT o.order_id) as total_orders, MIN(oi.price) as min_sold_price, MAX(oi.price) as max_sold_price FROM products p1 LEFT JOIN orderitems oi ON p1.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id GROUP BY p1.product_id, p1.name, p1.price HAVING p1.price > AVG(oi.price) ORDER BY p1.price DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),1.6865499019622803,0.0,0.0,0.0,93.2421875,93.2421875,0.0,0,1,0,0,0,0,0,0,2,0,1,1,1,0,0,6,0,
product_price_changes_hash,hash,"SELECT p1.product_id, p1.name, p1.price as current_price, COUNT(DISTINCT o.order_id) as total_orders, MIN(oi.price) as min_sold_price, MAX(oi.price) as max_sold_price FROM products p1 LEFT JOIN orderitems oi ON p1.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id GROUP BY p1.product_id, p1.name, p1.price HAVING p1.price > AVG(oi.price) ORDER BY p1.price DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),1.6666946411132812,0.0,0.0,0.0,93.2421875,93.2421875,0.0,0,1,0,0,0,0,0,0,2,0,1,1,1,0,0,6,0,
product_price_changes_bitmap,bitmap,"SELECT p1.product_id, p1.name, p1.price as current_price, COUNT(DISTINCT o.order_id) as total_orders, MIN(oi.price) as min_sold_price, MAX(oi.price) as max_sold_price FROM products p1 LEFT JOIN orderitems oi ON p1.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id GROUP BY p1.product_id, p1.name, p1.price HAVING p1.price > AVG(oi.price) ORDER BY p1.price DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),1.6702685356140137,0.0,0.0,0.0,93.2421875,93.2421875,0.0,0,1,0,0,0,0,0,0,2,0,1,1,1,0,0,6,0,
product_price_changes_gist,gist,"SELECT p1.product_id, p1.name, p1.price as current_price, COUNT(DISTINCT o.order_id) as total_orders, MIN(oi.price) as min_sold_price, MAX(oi.price) as max_sold_price FROM products p1 LEFT JOIN orderitems oi ON p1.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id GROUP BY p1.product_id, p1.name, p1.price HAVING p1.price > AVG(oi.price) ORDER BY p1.price DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),1.7368433475494385,0.0,0.0,0.0,93.2421875,93.2421875,0.0,0,1,0,0,0,0,0,0,2,0,1,1,1,0,0,6,0,
product_price_changes_reverse,reverse,"SELECT p1.product_id, p1.name, p1.price as current_price, COUNT(DISTINCT o.order_id) as total_orders, MIN(oi.price) as min_sold_price, MAX(oi.price) as max_sold_price FROM products p1 LEFT JOIN orderitems oi ON p1.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id GROUP BY p1.product_id, p1.name, p1.price HAVING p1.price > AVG(oi.price) ORDER BY p1.price DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),1.6842212677001953,0.0,0.0,0.0,93.2421875,93.2421875,0.0,0,1,0,0,0,0,0,0,2,0,1,1,1,0,0,6,0,
product_sales_ranking,btree,"SELECT p.product_id, p.name, SUM(oi.quantity) as total_sold, SUM(oi.quantity * oi.price) as total_revenue, RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) as revenue_rank FROM products p JOIN orderitems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.21452903747558594,0.0,0.0,0.0,93.2421875,93.2421875,0.0,2000,1,0,0,0,0,0,0,1,0,1,2,0,0,0,1,0,
product_sales_ranking_hash,hash,"SELECT p.product_id, p.name, SUM(oi.quantity) as total_sold, SUM(oi.quantity * oi.price) as total_revenue, RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) as revenue_rank FROM products p JOIN orderitems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.2793700695037842,0.0,0.0,0.0,93.24609375,93.24609375,0.0,2000,1,0,0,0,0,0,0,1,0,1,2,0,0,0,1,0,
product_sales_ranking_bitmap,bitmap,"SELECT p.product_id, p.name, SUM(oi.quantity) as total_sold, SUM(oi.quantity * oi.price) as total_revenue, RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) as revenue_rank FROM products p JOIN orderitems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.2793009281158447,0.0,0.0,0.0,93.24609375,93.24609375,0.0,2000,1,0,0,0,0,0,0,1,0,1,2,0,0,0,1,0,
product_sales_ranking_gist,gist,"SELECT p.product_id, p.name, SUM(oi.quantity) as total_sold, SUM(oi.quantity * oi.price) as total_revenue, RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) as revenue_rank FROM products p JOIN orderitems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.23534822463989258,0.0,0.0,0.0,93.24609375,93.24609375,0.0,2000,1,0,0,0,0,0,0,1,0,1,2,0,0,0,1,0,
product_sales_ranking_reverse,reverse,"SELECT p.product_id, p.name, SUM(oi.quantity) as total_sold, SUM(oi.quantity * oi.price) as total_revenue, RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) as revenue_rank FROM products p JOIN orderitems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.251645565032959,0.0,0.0,0.0,93.24609375,93.24609375,0.0,2000,1,0,0,0,0,0,0,1,0,1,2,0,0,0,1,0,
range_product_price,btree,"SELECT product_id, name, price FROM Products WHERE price BETWEEN 50 AND 150 ORDER BY price;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.002775430679321289,0.0,0.0,0.0,93.24609375,93.24609375,0.0,208,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_product_price_hash,hash,"SELECT product_id, name, price FROM Products WHERE price BETWEEN 50 AND 150 ORDER BY price;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.003493070602416992,0.0,0.0,0.0,93.24609375,93.24609375,0.0,208,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_product_price_bitmap,bitmap,"SELECT product_id, name, price FROM Products WHERE price BETWEEN 50 AND 150 ORDER BY price;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.005864858627319336,0.0,0.0,0.0,93.24609375,93.24609375,0.0,208,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_product_price_gist,gist,"SELECT product_id, name, price FROM Products WHERE price BETWEEN 50 AND 150 ORDER BY price;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.00238800048828125,0.0,0.0,0.0,93.24609375,93.24609375,0.0,208,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_product_price_reverse,reverse,"SELECT product_id, name, price FROM Products WHERE price BETWEEN 50 AND 150 ORDER BY price;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0035130977630615234,0.0,0.0,0.0,93.24609375,93.24609375,0.0,208,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_sort_order_date,btree,"SELECT order_id, user_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.019643068313598633,0.0,0.0,0.0,93.24609375,93.671875,0.42578125,8775,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_sort_order_date_hash,hash,"SELECT order_id, user_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.04987168312072754,0.0,0.0,0.0,93.671875,93.671875,0.0,8775,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_sort_order_date_bitmap,bitmap,"SELECT order_id, user_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.03829789161682129,0.0,0.0,0.0,93.671875,93.671875,0.0,8775,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_sort_order_date_gist,gist,"SELECT order_id, user_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.018818378448486328,0.0,0.0,0.0,93.671875,93.671875,0.0,8775,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
range_sort_order_date_reverse,reverse,"SELECT order_id, user_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04218554496765137,0.0,0.0,0.0,93.671875,93.671875,0.0,8775,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,
sales_dashboard,btree,"WITH DailySales AS ( SELECT DATE(o.order_date) AS sale_date, EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, EXTRACT(DOW FROM o.order_date) + 1 AS day_of_week,  -- Adjusted for PostgreSQL EXTRACT(DOY FROM o.order_date) AS day_of_year, EXTRACT(QUARTER FROM o.order_date) AS quarter, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count, SUM(o.total_amount) AS revenue, AVG(o.total_amount) AS avg_order_value, SUM(oi.quantity) AS units_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '3 years' GROUP BY DATE(o.order_date),  -- Include the same expression used in SELECT EXTRACT(YEAR FROM o.order_date),  -- Added to GROUP BY EXTRACT(MONTH FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOW FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOY FROM o.order_date),  -- Added to GROUP BY EXTRACT(QUARTER FROM o.order_date)  -- Added to GROUP BY ) SELECT ds.*, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7day_avg_revenue, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS rolling_30day_avg_revenue, LAG(revenue, 365) OVER (ORDER BY sale_date) AS revenue_last_year, CASE WHEN LAG(revenue, 365) OVER (ORDER BY sale_date) IS NOT NULL THEN (revenue - LAG(revenue, 365) OVER (ORDER BY sale_date)) / NULLIF(LAG(revenue, 365) OVER (ORDER BY sale_date), 0) * 100 ELSE NULL END AS yoy_revenue_growth, AVG(revenue) OVER (PARTITION BY day_of_week) AS avg_revenue_by_day_of_week, AVG(revenue) OVER (PARTITION BY month) AS avg_revenue_by_month, AVG(revenue) OVER (PARTITION BY quarter) AS avg_revenue_by_quarter, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY day_of_week), 0) AS day_of_week_index, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY month), 0) AS month_index, DENSE_RANK() OVER (PARTITION BY year, month ORDER BY revenue DESC) AS day_rank_in_month, DENSE_RANK() OVER (PARTITION BY year ORDER BY revenue DESC) AS day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;
                                                                       ^
"
sales_dashboard_hash,hash,"WITH DailySales AS ( SELECT DATE(o.order_date) AS sale_date, EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, EXTRACT(DOW FROM o.order_date) + 1 AS day_of_week,  -- Adjusted for PostgreSQL EXTRACT(DOY FROM o.order_date) AS day_of_year, EXTRACT(QUARTER FROM o.order_date) AS quarter, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count, SUM(o.total_amount) AS revenue, AVG(o.total_amount) AS avg_order_value, SUM(oi.quantity) AS units_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '3 years' GROUP BY DATE(o.order_date),  -- Include the same expression used in SELECT EXTRACT(YEAR FROM o.order_date),  -- Added to GROUP BY EXTRACT(MONTH FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOW FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOY FROM o.order_date),  -- Added to GROUP BY EXTRACT(QUARTER FROM o.order_date)  -- Added to GROUP BY ) SELECT ds.*, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7day_avg_revenue, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS rolling_30day_avg_revenue, LAG(revenue, 365) OVER (ORDER BY sale_date) AS revenue_last_year, CASE WHEN LAG(revenue, 365) OVER (ORDER BY sale_date) IS NOT NULL THEN (revenue - LAG(revenue, 365) OVER (ORDER BY sale_date)) / NULLIF(LAG(revenue, 365) OVER (ORDER BY sale_date), 0) * 100 ELSE NULL END AS yoy_revenue_growth, AVG(revenue) OVER (PARTITION BY day_of_week) AS avg_revenue_by_day_of_week, AVG(revenue) OVER (PARTITION BY month) AS avg_revenue_by_month, AVG(revenue) OVER (PARTITION BY quarter) AS avg_revenue_by_quarter, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY day_of_week), 0) AS day_of_week_index, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY month), 0) AS month_index, DENSE_RANK() OVER (PARTITION BY year, month ORDER BY revenue DESC) AS day_rank_in_month, DENSE_RANK() OVER (PARTITION BY year ORDER BY revenue DESC) AS day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;
                                                                       ^
"
sales_dashboard_bitmap,bitmap,"WITH DailySales AS ( SELECT DATE(o.order_date) AS sale_date, EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, EXTRACT(DOW FROM o.order_date) + 1 AS day_of_week,  -- Adjusted for PostgreSQL EXTRACT(DOY FROM o.order_date) AS day_of_year, EXTRACT(QUARTER FROM o.order_date) AS quarter, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count, SUM(o.total_amount) AS revenue, AVG(o.total_amount) AS avg_order_value, SUM(oi.quantity) AS units_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '3 years' GROUP BY DATE(o.order_date),  -- Include the same expression used in SELECT EXTRACT(YEAR FROM o.order_date),  -- Added to GROUP BY EXTRACT(MONTH FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOW FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOY FROM o.order_date),  -- Added to GROUP BY EXTRACT(QUARTER FROM o.order_date)  -- Added to GROUP BY ) SELECT ds.*, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7day_avg_revenue, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS rolling_30day_avg_revenue, LAG(revenue, 365) OVER (ORDER BY sale_date) AS revenue_last_year, CASE WHEN LAG(revenue, 365) OVER (ORDER BY sale_date) IS NOT NULL THEN (revenue - LAG(revenue, 365) OVER (ORDER BY sale_date)) / NULLIF(LAG(revenue, 365) OVER (ORDER BY sale_date), 0) * 100 ELSE NULL END AS yoy_revenue_growth, AVG(revenue) OVER (PARTITION BY day_of_week) AS avg_revenue_by_day_of_week, AVG(revenue) OVER (PARTITION BY month) AS avg_revenue_by_month, AVG(revenue) OVER (PARTITION BY quarter) AS avg_revenue_by_quarter, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY day_of_week), 0) AS day_of_week_index, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY month), 0) AS month_index, DENSE_RANK() OVER (PARTITION BY year, month ORDER BY revenue DESC) AS day_rank_in_month, DENSE_RANK() OVER (PARTITION BY year ORDER BY revenue DESC) AS day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;
                                                                       ^
"
sales_dashboard_gist,gist,"WITH DailySales AS ( SELECT DATE(o.order_date) AS sale_date, EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, EXTRACT(DOW FROM o.order_date) + 1 AS day_of_week,  -- Adjusted for PostgreSQL EXTRACT(DOY FROM o.order_date) AS day_of_year, EXTRACT(QUARTER FROM o.order_date) AS quarter, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count, SUM(o.total_amount) AS revenue, AVG(o.total_amount) AS avg_order_value, SUM(oi.quantity) AS units_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '3 years' GROUP BY DATE(o.order_date),  -- Include the same expression used in SELECT EXTRACT(YEAR FROM o.order_date),  -- Added to GROUP BY EXTRACT(MONTH FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOW FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOY FROM o.order_date),  -- Added to GROUP BY EXTRACT(QUARTER FROM o.order_date)  -- Added to GROUP BY ) SELECT ds.*, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7day_avg_revenue, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS rolling_30day_avg_revenue, LAG(revenue, 365) OVER (ORDER BY sale_date) AS revenue_last_year, CASE WHEN LAG(revenue, 365) OVER (ORDER BY sale_date) IS NOT NULL THEN (revenue - LAG(revenue, 365) OVER (ORDER BY sale_date)) / NULLIF(LAG(revenue, 365) OVER (ORDER BY sale_date), 0) * 100 ELSE NULL END AS yoy_revenue_growth, AVG(revenue) OVER (PARTITION BY day_of_week) AS avg_revenue_by_day_of_week, AVG(revenue) OVER (PARTITION BY month) AS avg_revenue_by_month, AVG(revenue) OVER (PARTITION BY quarter) AS avg_revenue_by_quarter, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY day_of_week), 0) AS day_of_week_index, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY month), 0) AS month_index, DENSE_RANK() OVER (PARTITION BY year, month ORDER BY revenue DESC) AS day_rank_in_month, DENSE_RANK() OVER (PARTITION BY year ORDER BY revenue DESC) AS day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;
                                                                       ^
"
sales_dashboard_reverse,reverse,"WITH DailySales AS ( SELECT DATE(o.order_date) AS sale_date, EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, EXTRACT(DOW FROM o.order_date) + 1 AS day_of_week,  -- Adjusted for PostgreSQL EXTRACT(DOY FROM o.order_date) AS day_of_year, EXTRACT(QUARTER FROM o.order_date) AS quarter, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count, SUM(o.total_amount) AS revenue, AVG(o.total_amount) AS avg_order_value, SUM(oi.quantity) AS units_sold FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '3 years' GROUP BY DATE(o.order_date),  -- Include the same expression used in SELECT EXTRACT(YEAR FROM o.order_date),  -- Added to GROUP BY EXTRACT(MONTH FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOW FROM o.order_date),  -- Added to GROUP BY EXTRACT(DOY FROM o.order_date),  -- Added to GROUP BY EXTRACT(QUARTER FROM o.order_date)  -- Added to GROUP BY ) SELECT ds.*, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7day_avg_revenue, AVG(revenue) OVER (ORDER BY sale_date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS rolling_30day_avg_revenue, LAG(revenue, 365) OVER (ORDER BY sale_date) AS revenue_last_year, CASE WHEN LAG(revenue, 365) OVER (ORDER BY sale_date) IS NOT NULL THEN (revenue - LAG(revenue, 365) OVER (ORDER BY sale_date)) / NULLIF(LAG(revenue, 365) OVER (ORDER BY sale_date), 0) * 100 ELSE NULL END AS yoy_revenue_growth, AVG(revenue) OVER (PARTITION BY day_of_week) AS avg_revenue_by_day_of_week, AVG(revenue) OVER (PARTITION BY month) AS avg_revenue_by_month, AVG(revenue) OVER (PARTITION BY quarter) AS avg_revenue_by_quarter, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY day_of_week), 0) AS day_of_week_index, revenue / NULLIF(AVG(revenue) OVER (PARTITION BY month), 0) AS month_index, DENSE_RANK() OVER (PARTITION BY year, month ORDER BY revenue DESC) AS day_rank_in_month, DENSE_RANK() OVER (PARTITION BY year ORDER BY revenue DESC) AS day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...day_rank_in_year FROM DailySales ds ORDER BY sale_date DESC;
                                                                       ^
"
time_series_analysis,btree,"WITH MonthlyRevenue AS ( SELECT TO_CHAR(o.order_date, 'YYYY-MM') AS month,  -- Changed DATE_FORMAT to TO_CHAR for PostgreSQL c.category_id, c.name AS category_name, SUM(oi.quantity * oi.price) AS monthly_revenue, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '24 months'  -- Adjusted for PostgreSQL GROUP BY TO_CHAR(o.order_date, 'YYYY-MM'), c.category_id, c.name  -- Changed DATE_FORMAT to TO_CHAR ) SELECT mr.month, mr.category_name, mr.monthly_revenue, mr.order_count, mr.customer_count, LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month) AS prev_month_revenue, (mr.monthly_revenue - LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS month_over_month_growth, (mr.monthly_revenue - LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS year_over_year_growth, AVG(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month_avg, SUM(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...ue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;
                                                                       ^
"
time_series_analysis_hash,hash,"WITH MonthlyRevenue AS ( SELECT TO_CHAR(o.order_date, 'YYYY-MM') AS month,  -- Changed DATE_FORMAT to TO_CHAR for PostgreSQL c.category_id, c.name AS category_name, SUM(oi.quantity * oi.price) AS monthly_revenue, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '24 months'  -- Adjusted for PostgreSQL GROUP BY TO_CHAR(o.order_date, 'YYYY-MM'), c.category_id, c.name  -- Changed DATE_FORMAT to TO_CHAR ) SELECT mr.month, mr.category_name, mr.monthly_revenue, mr.order_count, mr.customer_count, LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month) AS prev_month_revenue, (mr.monthly_revenue - LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS month_over_month_growth, (mr.monthly_revenue - LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS year_over_year_growth, AVG(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month_avg, SUM(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...ue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;
                                                                       ^
"
time_series_analysis_bitmap,bitmap,"WITH MonthlyRevenue AS ( SELECT TO_CHAR(o.order_date, 'YYYY-MM') AS month,  -- Changed DATE_FORMAT to TO_CHAR for PostgreSQL c.category_id, c.name AS category_name, SUM(oi.quantity * oi.price) AS monthly_revenue, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '24 months'  -- Adjusted for PostgreSQL GROUP BY TO_CHAR(o.order_date, 'YYYY-MM'), c.category_id, c.name  -- Changed DATE_FORMAT to TO_CHAR ) SELECT mr.month, mr.category_name, mr.monthly_revenue, mr.order_count, mr.customer_count, LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month) AS prev_month_revenue, (mr.monthly_revenue - LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS month_over_month_growth, (mr.monthly_revenue - LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS year_over_year_growth, AVG(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month_avg, SUM(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...ue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;
                                                                       ^
"
time_series_analysis_gist,gist,"WITH MonthlyRevenue AS ( SELECT TO_CHAR(o.order_date, 'YYYY-MM') AS month,  -- Changed DATE_FORMAT to TO_CHAR for PostgreSQL c.category_id, c.name AS category_name, SUM(oi.quantity * oi.price) AS monthly_revenue, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '24 months'  -- Adjusted for PostgreSQL GROUP BY TO_CHAR(o.order_date, 'YYYY-MM'), c.category_id, c.name  -- Changed DATE_FORMAT to TO_CHAR ) SELECT mr.month, mr.category_name, mr.monthly_revenue, mr.order_count, mr.customer_count, LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month) AS prev_month_revenue, (mr.monthly_revenue - LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS month_over_month_growth, (mr.monthly_revenue - LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS year_over_year_growth, AVG(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month_avg, SUM(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...ue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;
                                                                       ^
"
time_series_analysis_reverse,reverse,"WITH MonthlyRevenue AS ( SELECT TO_CHAR(o.order_date, 'YYYY-MM') AS month,  -- Changed DATE_FORMAT to TO_CHAR for PostgreSQL c.category_id, c.name AS category_name, SUM(oi.quantity * oi.price) AS monthly_revenue, COUNT(DISTINCT o.order_id) AS order_count, COUNT(DISTINCT o.user_id) AS customer_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id WHERE o.status != 'Cancelled' AND o.order_date >= CURRENT_DATE - INTERVAL '24 months'  -- Adjusted for PostgreSQL GROUP BY TO_CHAR(o.order_date, 'YYYY-MM'), c.category_id, c.name  -- Changed DATE_FORMAT to TO_CHAR ) SELECT mr.month, mr.category_name, mr.monthly_revenue, mr.order_count, mr.customer_count, LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month) AS prev_month_revenue, (mr.monthly_revenue - LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 1) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS month_over_month_growth, (mr.monthly_revenue - LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month)) / NULLIF(LAG(mr.monthly_revenue, 12) OVER (PARTITION BY mr.category_id ORDER BY mr.month), 0) * 100 AS year_over_year_growth, AVG(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month_avg, SUM(mr.monthly_revenue) OVER (PARTITION BY mr.category_id ORDER BY mr.month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...ue FROM MonthlyRevenue mr ORDER BY mr.category_id, mr.month;
                                                                       ^
"
category_lookup,hash,SELECT * FROM categories WHERE category_id = 5;,Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.004876375198364258,0.0,0.0,0.0,93.6796875,93.6796875,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
category_lookup_btree,btree,SELECT * FROM categories WHERE category_id = 5;,B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.001973867416381836,0.0,0.0,0.0,93.6796875,93.6796875,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
category_lookup_bitmap,bitmap,SELECT * FROM categories WHERE category_id = 5;,Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.002240419387817383,0.0,0.0,0.0,93.6796875,93.6796875,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
category_lookup_gist,gist,SELECT * FROM categories WHERE category_id = 5;,GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.005902767181396484,0.0,0.0,0.0,93.6796875,93.6796875,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
category_lookup_reverse,reverse,SELECT * FROM categories WHERE category_id = 5;,Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.005136251449584961,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
category_products,hash,"SELECT p.product_id, p.name, p.price, p.stock_quantity, p.created_at FROM Products p WHERE p.category_id = 5 ORDER BY p.price ASC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.006622314453125,0.0,0.0,0.0,93.68359375,93.68359375,0.0,101,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,
category_products_btree,btree,"SELECT p.product_id, p.name, p.price, p.stock_quantity, p.created_at FROM Products p WHERE p.category_id = 5 ORDER BY p.price ASC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.004703521728515625,0.0,0.0,0.0,93.68359375,93.68359375,0.0,101,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,
category_products_bitmap,bitmap,"SELECT p.product_id, p.name, p.price, p.stock_quantity, p.created_at FROM Products p WHERE p.category_id = 5 ORDER BY p.price ASC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0058820247650146484,0.0,0.0,0.0,93.68359375,93.68359375,0.0,101,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,
category_products_gist,gist,"SELECT p.product_id, p.name, p.price, p.stock_quantity, p.created_at FROM Products p WHERE p.category_id = 5 ORDER BY p.price ASC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0023453235626220703,0.0,0.0,0.0,93.68359375,93.68359375,0.0,101,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,
category_products_reverse,reverse,"SELECT p.product_id, p.name, p.price, p.stock_quantity, p.created_at FROM Products p WHERE p.category_id = 5 ORDER BY p.price ASC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.005765676498413086,0.0,0.0,0.0,93.68359375,93.68359375,0.0,101,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,
daily_order_lookup,hash,"SELECT o.order_id, o.order_date, u.email, SUM(oi.quantity) as total_items, STRING_AGG(p.name, ', ') as products_ordered FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 5000 GROUP BY o.order_id, o.order_date, u.email;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.04684638977050781,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,3,1,1,0,0,0,0,4,0,
daily_order_lookup_btree,btree,"SELECT o.order_id, o.order_date, u.email, SUM(oi.quantity) as total_items, STRING_AGG(p.name, ', ') as products_ordered FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 5000 GROUP BY o.order_id, o.order_date, u.email;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.006114482879638672,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,3,1,1,0,0,0,0,4,0,
daily_order_lookup_bitmap,bitmap,"SELECT o.order_id, o.order_date, u.email, SUM(oi.quantity) as total_items, STRING_AGG(p.name, ', ') as products_ordered FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 5000 GROUP BY o.order_id, o.order_date, u.email;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.04175972938537598,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,3,1,1,0,0,0,0,4,0,
daily_order_lookup_gist,gist,"SELECT o.order_id, o.order_date, u.email, SUM(oi.quantity) as total_items, STRING_AGG(p.name, ', ') as products_ordered FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 5000 GROUP BY o.order_id, o.order_date, u.email;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.03729820251464844,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,3,1,1,0,0,0,0,4,0,
daily_order_lookup_reverse,reverse,"SELECT o.order_id, o.order_date, u.email, SUM(oi.quantity) as total_items, STRING_AGG(p.name, ', ') as products_ordered FROM orders o JOIN users u ON o.user_id = u.user_id JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 5000 GROUP BY o.order_id, o.order_date, u.email;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04040980339050293,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,3,1,1,0,0,0,0,4,0,
exact_email_match,hash,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'newtontodd@example.net';  -- Changed to single quotes and removed extra wildcard",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.006129741668701172,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,
exact_email_match_btree,btree,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'newtontodd@example.net';  -- Changed to single quotes and removed extra wildcard",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.005376338958740234,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,
exact_email_match_bitmap,bitmap,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'newtontodd@example.net';  -- Changed to single quotes and removed extra wildcard",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0043294429779052734,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,
exact_email_match_gist,gist,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'newtontodd@example.net';  -- Changed to single quotes and removed extra wildcard",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.00687718391418457,0.0,0.0,0.0,93.68359375,93.68359375,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,
exact_email_match_reverse,reverse,"SELECT user_id, first_name, last_name, email FROM Users WHERE email LIKE 'newtontodd@example.net';  -- Changed to single quotes and removed extra wildcard",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.004033565521240234,0.0,0.0,0.0,93.671875,93.671875,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,
exact_order_lookup,hash,"SELECT o.order_id, o.user_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) AS item_count, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.order_id = 12345 GROUP BY o.order_id, o.user_id, o.order_date, o.total_amount, u.email;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.03950309753417969,0.0,0.0,0.0,93.671875,93.671875,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,2,0,
exact_order_lookup_btree,btree,"SELECT o.order_id, o.user_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) AS item_count, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.order_id = 12345 GROUP BY o.order_id, o.user_id, o.order_date, o.total_amount, u.email;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.002885580062866211,0.0,0.0,0.0,93.671875,93.671875,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,2,0,
exact_order_lookup_bitmap,bitmap,"SELECT o.order_id, o.user_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) AS item_count, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.order_id = 12345 GROUP BY o.order_id, o.user_id, o.order_date, o.total_amount, u.email;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0378873348236084,0.0,0.0,0.0,93.671875,93.671875,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,2,0,
exact_order_lookup_gist,gist,"SELECT o.order_id, o.user_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) AS item_count, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.order_id = 12345 GROUP BY o.order_id, o.user_id, o.order_date, o.total_amount, u.email;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.03796958923339844,0.0,0.0,0.0,93.671875,93.671875,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,2,0,
exact_order_lookup_reverse,reverse,"SELECT o.order_id, o.user_id, o.order_date, o.total_amount, u.email, COUNT(oi.order_item_id) AS item_count, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN OrderItems oi ON o.order_id = oi.order_id WHERE o.order_id = 12345 GROUP BY o.order_id, o.user_id, o.order_date, o.total_amount, u.email;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.03728961944580078,0.0,0.0,0.0,93.671875,93.671875,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,2,0,
exact_order_status,hash,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Shipped';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.16623401641845703,0.0,0.0,0.0,93.671875,123.3359375,29.6640625,118505,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_order_status_btree,btree,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Shipped';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.15425395965576172,0.0,0.0,0.0,94.7890625,123.4765625,28.6875,118505,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_order_status_bitmap,bitmap,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Shipped';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.14998126029968262,0.0,0.0,0.0,95.46484375,123.09765625,27.6328125,118505,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_order_status_gist,gist,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Shipped';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.16512322425842285,0.0,0.0,0.0,96.7734375,123.36328125,26.58984375,118505,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_order_status_reverse,reverse,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Shipped';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.16583657264709473,0.0,0.0,0.0,98.95703125,123.28515625,24.328125,118505,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_product_match,hash,"SELECT product_id, name, price FROM Products WHERE product_id = 5423;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.006192445755004883,0.0,0.0,0.0,98.99609375,98.99609375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_product_match_btree,btree,"SELECT product_id, name, price FROM Products WHERE product_id = 5423;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0022630691528320312,0.0,0.0,0.0,98.99609375,98.99609375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_product_match_bitmap,bitmap,"SELECT product_id, name, price FROM Products WHERE product_id = 5423;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0016429424285888672,0.0,0.0,0.0,98.99609375,98.99609375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_product_match_gist,gist,"SELECT product_id, name, price FROM Products WHERE product_id = 5423;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.00170135498046875,0.0,0.0,0.0,98.99609375,98.99609375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
exact_product_match_reverse,reverse,"SELECT product_id, name, price FROM Products WHERE product_id = 5423;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0015859603881835938,0.0,0.0,0.0,98.99609375,98.99609375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
join_exact_match,hash,"SELECT o.order_id, o.order_date, p.name as product_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.03716254234313965,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
join_exact_match_btree,btree,"SELECT o.order_id, o.order_date, p.name as product_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.001897573471069336,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
join_exact_match_bitmap,bitmap,"SELECT o.order_id, o.order_date, p.name as product_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.044045448303222656,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
join_exact_match_gist,gist,"SELECT o.order_id, o.order_date, p.name as product_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.03916811943054199,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
join_exact_match_reverse,reverse,"SELECT o.order_id, o.order_date, p.name as product_name FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04093313217163086,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
order_details,hash,"SELECT o.order_id, o.order_date, oi.product_id, p.name as product_name, oi.quantity, oi.price FROM orders o JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.039728641510009766,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
order_details_btree,btree,"SELECT o.order_id, o.order_date, oi.product_id, p.name as product_name, oi.quantity, oi.price FROM orders o JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0061070919036865234,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
order_details_bitmap,bitmap,"SELECT o.order_id, o.order_date, oi.product_id, p.name as product_name, oi.quantity, oi.price FROM orders o JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.03738856315612793,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
order_details_gist,gist,"SELECT o.order_id, o.order_date, oi.product_id, p.name as product_name, oi.quantity, oi.price FROM orders o JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.04447364807128906,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
order_details_reverse,reverse,"SELECT o.order_id, o.order_date, oi.product_id, p.name as product_name, oi.quantity, oi.price FROM orders o JOIN orderitems oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.order_id = 12345;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.046630859375,0.0,0.0,0.0,98.99609375,98.99609375,0.0,5,1,0,0,0,0,0,0,2,1,0,0,0,0,0,2,0,
product_details,hash,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name AS category_name, COUNT(DISTINCT oi.order_id) AS times_ordered, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.product_id = 1502 GROUP BY p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.04185986518859863,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,3,0,
product_details_btree,btree,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name AS category_name, COUNT(DISTINCT oi.order_id) AS times_ordered, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.product_id = 1502 GROUP BY p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0038268566131591797,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,3,0,
product_details_bitmap,bitmap,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name AS category_name, COUNT(DISTINCT oi.order_id) AS times_ordered, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.product_id = 1502 GROUP BY p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.04283642768859863,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,3,0,
product_details_gist,gist,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name AS category_name, COUNT(DISTINCT oi.order_id) AS times_ordered, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.product_id = 1502 GROUP BY p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0390622615814209,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,3,0,
product_details_reverse,reverse,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name AS category_name, COUNT(DISTINCT oi.order_id) AS times_ordered, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.product_id = 1502 GROUP BY p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04262089729309082,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,3,0,
product_info,hash,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id = 100;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.00397181510925293,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
product_info_btree,btree,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id = 100;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0020134449005126953,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
product_info_bitmap,bitmap,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id = 100;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.006380796432495117,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
product_info_gist,gist,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id = 100;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.005096912384033203,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
product_info_reverse,reverse,"SELECT p.product_id, p.name, p.description, p.price, p.stock_quantity, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.product_id = 100;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.001968860626220703,0.0,0.0,0.0,98.99609375,98.99609375,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
specific_product_orders,hash,"SELECT p.product_id, p.name, o.order_date, u.email as customer_email, oi.quantity, oi.price as sold_price FROM products p JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.product_id = 123;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.04076433181762695,0.0,0.0,0.0,98.99609375,99.0703125,0.07421875,735,1,0,0,0,0,0,0,3,1,0,0,0,0,0,3,0,
specific_product_orders_btree,btree,"SELECT p.product_id, p.name, o.order_date, u.email as customer_email, oi.quantity, oi.price as sold_price FROM products p JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.product_id = 123;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.14269471168518066,0.0,0.0,0.0,99.0703125,99.0703125,0.0,735,1,0,0,0,0,0,0,3,1,0,0,0,0,0,3,0,
specific_product_orders_bitmap,bitmap,"SELECT p.product_id, p.name, o.order_date, u.email as customer_email, oi.quantity, oi.price as sold_price FROM products p JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.product_id = 123;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.04136490821838379,0.0,0.0,0.0,99.0703125,99.0703125,0.0,735,1,0,0,0,0,0,0,3,1,0,0,0,0,0,3,0,
specific_product_orders_gist,gist,"SELECT p.product_id, p.name, o.order_date, u.email as customer_email, oi.quantity, oi.price as sold_price FROM products p JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.product_id = 123;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.04247283935546875,0.0,0.0,0.0,99.0703125,99.0703125,0.0,735,1,0,0,0,0,0,0,3,1,0,0,0,0,0,3,0,
specific_product_orders_reverse,reverse,"SELECT p.product_id, p.name, o.order_date, u.email as customer_email, oi.quantity, oi.price as sold_price FROM products p JOIN orderitems oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.product_id = 123;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04649186134338379,0.0,0.0,0.0,99.0703125,99.0703125,0.0,735,1,0,0,0,0,0,0,3,1,0,0,0,0,0,3,0,
user_last_order,hash,"SELECT u.user_id, u.email, o.order_id, o.order_date, o.total_amount FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 789 ORDER BY o.order_date DESC LIMIT 1;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.02908945083618164,0.0,0.0,0.0,99.0703125,99.0703125,0.0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,
user_last_order_btree,btree,"SELECT u.user_id, u.email, o.order_id, o.order_date, o.total_amount FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 789 ORDER BY o.order_date DESC LIMIT 1;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.002209186553955078,0.0,0.0,0.0,99.0703125,99.0703125,0.0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,
user_last_order_bitmap,bitmap,"SELECT u.user_id, u.email, o.order_id, o.order_date, o.total_amount FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 789 ORDER BY o.order_date DESC LIMIT 1;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.02758049964904785,0.0,0.0,0.0,99.0703125,99.0703125,0.0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,
user_last_order_gist,gist,"SELECT u.user_id, u.email, o.order_id, o.order_date, o.total_amount FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 789 ORDER BY o.order_date DESC LIMIT 1;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.028632640838623047,0.0,0.0,0.0,99.0703125,99.0703125,0.0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,
user_last_order_reverse,reverse,"SELECT u.user_id, u.email, o.order_id, o.order_date, o.total_amount FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 789 ORDER BY o.order_date DESC LIMIT 1;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.027135848999023438,0.0,0.0,0.0,99.0703125,99.0703125,0.0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,
user_lookup,hash,"SELECT u.user_id, u.email, u.first_name, u.last_name, u.phone_number FROM users u WHERE u.email = 'customer@example.com';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0049896240234375,0.0,0.0,0.0,99.0703125,99.0703125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
user_lookup_btree,btree,"SELECT u.user_id, u.email, u.first_name, u.last_name, u.phone_number FROM users u WHERE u.email = 'customer@example.com';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.002850770950317383,0.0,0.0,0.0,99.0703125,99.0703125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
user_lookup_bitmap,bitmap,"SELECT u.user_id, u.email, u.first_name, u.last_name, u.phone_number FROM users u WHERE u.email = 'customer@example.com';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.002639293670654297,0.0,0.0,0.0,99.0703125,99.0703125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
user_lookup_gist,gist,"SELECT u.user_id, u.email, u.first_name, u.last_name, u.phone_number FROM users u WHERE u.email = 'customer@example.com';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.008562803268432617,0.0,0.0,0.0,99.0703125,99.0703125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
user_lookup_reverse,reverse,"SELECT u.user_id, u.email, u.first_name, u.last_name, u.phone_number FROM users u WHERE u.email = 'customer@example.com';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.006475687026977539,0.0,0.0,0.0,99.0703125,99.0703125,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
user_orders,hash,"SELECT u.user_id, u.first_name, u.last_name, u.email, o.order_id, o.order_date, o.total_amount, o.status FROM Users u JOIN Orders o ON u.user_id = o.user_id WHERE u.user_id = 5001 ORDER BY o.order_date DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0273287296295166,0.0,0.0,0.0,99.0703125,99.0703125,0.0,48,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,
user_orders_btree,btree,"SELECT u.user_id, u.first_name, u.last_name, u.email, o.order_id, o.order_date, o.total_amount, o.status FROM Users u JOIN Orders o ON u.user_id = o.user_id WHERE u.user_id = 5001 ORDER BY o.order_date DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.00571751594543457,0.0,0.0,0.0,99.0703125,99.0703125,0.0,48,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,
user_orders_bitmap,bitmap,"SELECT u.user_id, u.first_name, u.last_name, u.email, o.order_id, o.order_date, o.total_amount, o.status FROM Users u JOIN Orders o ON u.user_id = o.user_id WHERE u.user_id = 5001 ORDER BY o.order_date DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.025729656219482422,0.0,0.0,0.0,99.0703125,99.0703125,0.0,48,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,
user_orders_gist,gist,"SELECT u.user_id, u.first_name, u.last_name, u.email, o.order_id, o.order_date, o.total_amount, o.status FROM Users u JOIN Orders o ON u.user_id = o.user_id WHERE u.user_id = 5001 ORDER BY o.order_date DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.028072118759155273,0.0,0.0,0.0,99.0703125,99.0703125,0.0,48,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,
user_orders_reverse,reverse,"SELECT u.user_id, u.first_name, u.last_name, u.email, o.order_id, o.order_date, o.total_amount, o.status FROM Users u JOIN Orders o ON u.user_id = o.user_id WHERE u.user_id = 5001 ORDER BY o.order_date DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04539775848388672,0.0,0.0,0.0,99.0703125,99.0703125,0.0,48,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,
analytics_status_count,bitmap,"SELECT COUNT(*) as order_count, status FROM Orders WHERE order_date BETWEEN '2017-01-01' AND '2025-06-30' GROUP BY status;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.03962826728820801,0.0,0.0,0.0,99.0703125,99.0703125,0.0,4,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,
analytics_status_count_btree,btree,"SELECT COUNT(*) as order_count, status FROM Orders WHERE order_date BETWEEN '2017-01-01' AND '2025-06-30' GROUP BY status;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.046642303466796875,0.0,0.0,0.0,99.0703125,99.0703125,0.0,4,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,
analytics_status_count_hash,hash,"SELECT COUNT(*) as order_count, status FROM Orders WHERE order_date BETWEEN '2017-01-01' AND '2025-06-30' GROUP BY status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.038822174072265625,0.0,0.0,0.0,99.0703125,99.0703125,0.0,4,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,
analytics_status_count_gist,gist,"SELECT COUNT(*) as order_count, status FROM Orders WHERE order_date BETWEEN '2017-01-01' AND '2025-06-30' GROUP BY status;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.03941082954406738,0.0,0.0,0.0,99.0703125,99.0703125,0.0,4,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,
analytics_status_count_reverse,reverse,"SELECT COUNT(*) as order_count, status FROM Orders WHERE order_date BETWEEN '2017-01-01' AND '2025-06-30' GROUP BY status;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.04886031150817871,0.0,0.0,0.0,99.0703125,99.0703125,0.0,4,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,
category_products,bitmap,"SELECT c.name as category_name, COUNT(p.product_id) as product_count, AVG(p.price) as avg_price FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_id, c.name;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.002547740936279297,0.0,0.0,0.0,99.0703125,99.0703125,0.0,20,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,
category_products_btree,btree,"SELECT c.name as category_name, COUNT(p.product_id) as product_count, AVG(p.price) as avg_price FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_id, c.name;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.002162456512451172,0.0,0.0,0.0,99.0703125,99.0703125,0.0,20,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,
category_products_hash,hash,"SELECT c.name as category_name, COUNT(p.product_id) as product_count, AVG(p.price) as avg_price FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_id, c.name;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.002797365188598633,0.0,0.0,0.0,99.0703125,99.0703125,0.0,20,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,
category_products_gist,gist,"SELECT c.name as category_name, COUNT(p.product_id) as product_count, AVG(p.price) as avg_price FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_id, c.name;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.002655029296875,0.0,0.0,0.0,99.0703125,99.0703125,0.0,20,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,
category_products_reverse,reverse,"SELECT c.name as category_name, COUNT(p.product_id) as product_count, AVG(p.price) as avg_price FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_id, c.name;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0025091171264648438,0.0,0.0,0.0,99.0703125,99.0703125,0.0,20,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,
cohort_analysis,bitmap,"WITH FirstPurchases AS ( SELECT u.user_id, TO_CHAR(MIN(o.order_date), 'YYYY-MM') AS cohort_month  -- Changed DATE_FORMAT to TO_CHAR FROM Users u JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id ), CustomerOrders AS ( SELECT fp.user_id, fp.cohort_month, TO_CHAR(o.order_date, 'YYYY-MM') AS order_month,  -- Changed DATE_FORMAT to TO_CHAR EXTRACT(YEAR FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) * 12 +  -- Calculate month difference EXTRACT(MONTH FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) AS month_number FROM FirstPurchases fp JOIN Orders o ON fp.user_id = o.user_id ), CohortSize AS ( SELECT cohort_month, COUNT(DISTINCT user_id) AS num_users FROM FirstPurchases GROUP BY cohort_month ), CohortRetention AS ( SELECT co.cohort_month, co.month_number, COUNT(DISTINCT co.user_id) AS num_users FROM CustomerOrders co GROUP BY co.cohort_month, co.month_number ) SELECT cr.cohort_month, cs.num_users AS cohort_size, cr.month_number, cr.num_users AS returning_users, (cr.num_users::float / cs.num_users) * 100 AS retention_rate  -- Ensure float division FROM CohortRetention cr JOIN CohortSize cs ON cr.cohort_month = cs.cohort_month WHERE cr.month_number <= 12 ORDER BY cr.cohort_month, cr.month_number;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...onth_number <= 12 ORDER BY cr.cohort_month, cr.month_number;
                                                                       ^
"
cohort_analysis_btree,btree,"WITH FirstPurchases AS ( SELECT u.user_id, TO_CHAR(MIN(o.order_date), 'YYYY-MM') AS cohort_month  -- Changed DATE_FORMAT to TO_CHAR FROM Users u JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id ), CustomerOrders AS ( SELECT fp.user_id, fp.cohort_month, TO_CHAR(o.order_date, 'YYYY-MM') AS order_month,  -- Changed DATE_FORMAT to TO_CHAR EXTRACT(YEAR FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) * 12 +  -- Calculate month difference EXTRACT(MONTH FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) AS month_number FROM FirstPurchases fp JOIN Orders o ON fp.user_id = o.user_id ), CohortSize AS ( SELECT cohort_month, COUNT(DISTINCT user_id) AS num_users FROM FirstPurchases GROUP BY cohort_month ), CohortRetention AS ( SELECT co.cohort_month, co.month_number, COUNT(DISTINCT co.user_id) AS num_users FROM CustomerOrders co GROUP BY co.cohort_month, co.month_number ) SELECT cr.cohort_month, cs.num_users AS cohort_size, cr.month_number, cr.num_users AS returning_users, (cr.num_users::float / cs.num_users) * 100 AS retention_rate  -- Ensure float division FROM CohortRetention cr JOIN CohortSize cs ON cr.cohort_month = cs.cohort_month WHERE cr.month_number <= 12 ORDER BY cr.cohort_month, cr.month_number;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...onth_number <= 12 ORDER BY cr.cohort_month, cr.month_number;
                                                                       ^
"
cohort_analysis_hash,hash,"WITH FirstPurchases AS ( SELECT u.user_id, TO_CHAR(MIN(o.order_date), 'YYYY-MM') AS cohort_month  -- Changed DATE_FORMAT to TO_CHAR FROM Users u JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id ), CustomerOrders AS ( SELECT fp.user_id, fp.cohort_month, TO_CHAR(o.order_date, 'YYYY-MM') AS order_month,  -- Changed DATE_FORMAT to TO_CHAR EXTRACT(YEAR FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) * 12 +  -- Calculate month difference EXTRACT(MONTH FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) AS month_number FROM FirstPurchases fp JOIN Orders o ON fp.user_id = o.user_id ), CohortSize AS ( SELECT cohort_month, COUNT(DISTINCT user_id) AS num_users FROM FirstPurchases GROUP BY cohort_month ), CohortRetention AS ( SELECT co.cohort_month, co.month_number, COUNT(DISTINCT co.user_id) AS num_users FROM CustomerOrders co GROUP BY co.cohort_month, co.month_number ) SELECT cr.cohort_month, cs.num_users AS cohort_size, cr.month_number, cr.num_users AS returning_users, (cr.num_users::float / cs.num_users) * 100 AS retention_rate  -- Ensure float division FROM CohortRetention cr JOIN CohortSize cs ON cr.cohort_month = cs.cohort_month WHERE cr.month_number <= 12 ORDER BY cr.cohort_month, cr.month_number;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...onth_number <= 12 ORDER BY cr.cohort_month, cr.month_number;
                                                                       ^
"
cohort_analysis_gist,gist,"WITH FirstPurchases AS ( SELECT u.user_id, TO_CHAR(MIN(o.order_date), 'YYYY-MM') AS cohort_month  -- Changed DATE_FORMAT to TO_CHAR FROM Users u JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id ), CustomerOrders AS ( SELECT fp.user_id, fp.cohort_month, TO_CHAR(o.order_date, 'YYYY-MM') AS order_month,  -- Changed DATE_FORMAT to TO_CHAR EXTRACT(YEAR FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) * 12 +  -- Calculate month difference EXTRACT(MONTH FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) AS month_number FROM FirstPurchases fp JOIN Orders o ON fp.user_id = o.user_id ), CohortSize AS ( SELECT cohort_month, COUNT(DISTINCT user_id) AS num_users FROM FirstPurchases GROUP BY cohort_month ), CohortRetention AS ( SELECT co.cohort_month, co.month_number, COUNT(DISTINCT co.user_id) AS num_users FROM CustomerOrders co GROUP BY co.cohort_month, co.month_number ) SELECT cr.cohort_month, cs.num_users AS cohort_size, cr.month_number, cr.num_users AS returning_users, (cr.num_users::float / cs.num_users) * 100 AS retention_rate  -- Ensure float division FROM CohortRetention cr JOIN CohortSize cs ON cr.cohort_month = cs.cohort_month WHERE cr.month_number <= 12 ORDER BY cr.cohort_month, cr.month_number;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...onth_number <= 12 ORDER BY cr.cohort_month, cr.month_number;
                                                                       ^
"
cohort_analysis_reverse,reverse,"WITH FirstPurchases AS ( SELECT u.user_id, TO_CHAR(MIN(o.order_date), 'YYYY-MM') AS cohort_month  -- Changed DATE_FORMAT to TO_CHAR FROM Users u JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id ), CustomerOrders AS ( SELECT fp.user_id, fp.cohort_month, TO_CHAR(o.order_date, 'YYYY-MM') AS order_month,  -- Changed DATE_FORMAT to TO_CHAR EXTRACT(YEAR FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) * 12 +  -- Calculate month difference EXTRACT(MONTH FROM AGE(o.order_date, TO_DATE(fp.cohort_month, 'YYYY-MM'))) AS month_number FROM FirstPurchases fp JOIN Orders o ON fp.user_id = o.user_id ), CohortSize AS ( SELECT cohort_month, COUNT(DISTINCT user_id) AS num_users FROM FirstPurchases GROUP BY cohort_month ), CohortRetention AS ( SELECT co.cohort_month, co.month_number, COUNT(DISTINCT co.user_id) AS num_users FROM CustomerOrders co GROUP BY co.cohort_month, co.month_number ) SELECT cr.cohort_month, cs.num_users AS cohort_size, cr.month_number, cr.num_users AS returning_users, (cr.num_users::float / cs.num_users) * 100 AS retention_rate  -- Ensure float division FROM CohortRetention cr JOIN CohortSize cs ON cr.cohort_month = cs.cohort_month WHERE cr.month_number <= 12 ORDER BY cr.cohort_month, cr.month_number;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at end of input
LINE 1: ...onth_number <= 12 ORDER BY cr.cohort_month, cr.month_number;
                                                                       ^
"
complex_and_or_filter,bitmap,"SELECT p.product_id, p.name, p.price, p.stock_quantity FROM Products p WHERE (p.category_id = 1 OR p.category_id = 2) AND (p.stock_quantity < 10 OR p.stock_quantity > 100);",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0073964595794677734,0.0,0.0,0.0,99.078125,99.078125,0.0,182,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
complex_and_or_filter_btree,btree,"SELECT p.product_id, p.name, p.price, p.stock_quantity FROM Products p WHERE (p.category_id = 1 OR p.category_id = 2) AND (p.stock_quantity < 10 OR p.stock_quantity > 100);",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.006653785705566406,0.0,0.0,0.0,99.078125,99.078125,0.0,182,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
complex_and_or_filter_hash,hash,"SELECT p.product_id, p.name, p.price, p.stock_quantity FROM Products p WHERE (p.category_id = 1 OR p.category_id = 2) AND (p.stock_quantity < 10 OR p.stock_quantity > 100);",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0026068687438964844,0.0,0.0,0.0,99.078125,99.078125,0.0,182,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
complex_and_or_filter_gist,gist,"SELECT p.product_id, p.name, p.price, p.stock_quantity FROM Products p WHERE (p.category_id = 1 OR p.category_id = 2) AND (p.stock_quantity < 10 OR p.stock_quantity > 100);",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0022966861724853516,0.0,0.0,0.0,99.078125,99.078125,0.0,182,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
complex_and_or_filter_reverse,reverse,"SELECT p.product_id, p.name, p.price, p.stock_quantity FROM Products p WHERE (p.category_id = 1 OR p.category_id = 2) AND (p.stock_quantity < 10 OR p.stock_quantity > 100);",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.006492137908935547,0.0,0.0,0.0,99.078125,99.078125,0.0,182,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
delivery_status_metrics,bitmap,"SELECT status, COUNT(*) as order_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - order_date))/86400) as avg_days_in_status, MIN(total_amount) as min_order_value, MAX(total_amount) as max_order_value, AVG(total_amount) as avg_order_value FROM orders GROUP BY status;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.09484624862670898,0.0,0.0,0.0,99.078125,99.078125,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,
delivery_status_metrics_btree,btree,"SELECT status, COUNT(*) as order_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - order_date))/86400) as avg_days_in_status, MIN(total_amount) as min_order_value, MAX(total_amount) as max_order_value, AVG(total_amount) as avg_order_value FROM orders GROUP BY status;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.09860587120056152,0.0,0.0,0.0,99.078125,99.078125,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,
delivery_status_metrics_hash,hash,"SELECT status, COUNT(*) as order_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - order_date))/86400) as avg_days_in_status, MIN(total_amount) as min_order_value, MAX(total_amount) as max_order_value, AVG(total_amount) as avg_order_value FROM orders GROUP BY status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.11449480056762695,0.0,0.0,0.0,99.078125,99.078125,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,
delivery_status_metrics_gist,gist,"SELECT status, COUNT(*) as order_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - order_date))/86400) as avg_days_in_status, MIN(total_amount) as min_order_value, MAX(total_amount) as max_order_value, AVG(total_amount) as avg_order_value FROM orders GROUP BY status;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.10067510604858398,0.0,0.0,0.0,99.08203125,99.08203125,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,
delivery_status_metrics_reverse,reverse,"SELECT status, COUNT(*) as order_count, AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - order_date))/86400) as avg_days_in_status, MIN(total_amount) as min_order_value, MAX(total_amount) as max_order_value, AVG(total_amount) as avg_order_value FROM orders GROUP BY status;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.10042309761047363,0.0,0.0,0.0,99.08203125,99.08203125,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,
monthly_order_status,bitmap,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as orders FROM orders GROUP BY month, status ORDER BY month, status;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.11070561408996582,0.0,0.0,0.0,99.08203125,99.08203125,0.0,432,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
monthly_order_status_btree,btree,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as orders FROM orders GROUP BY month, status ORDER BY month, status;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.11067652702331543,0.0,0.0,0.0,99.08203125,99.08203125,0.0,432,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
monthly_order_status_hash,hash,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as orders FROM orders GROUP BY month, status ORDER BY month, status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.1103525161743164,0.0,0.0,0.0,99.08203125,99.08203125,0.0,432,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
monthly_order_status_gist,gist,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as orders FROM orders GROUP BY month, status ORDER BY month, status;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.11199569702148438,0.0,0.0,0.0,99.08203125,99.08203125,0.0,432,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
monthly_order_status_reverse,reverse,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as orders FROM orders GROUP BY month, status ORDER BY month, status;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.11577749252319336,0.0,0.0,0.0,99.08203125,99.08203125,0.0,432,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
multiple_status_or,bitmap,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.2974395751953125,0.0,0.0,0.0,99.08203125,164.62109375,65.5390625,237361,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
multiple_status_or_btree,btree,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.2968599796295166,0.0,0.0,0.0,101.45703125,164.875,63.41796875,237361,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
multiple_status_or_hash,hash,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.3249938488006592,0.0,0.0,0.0,101.85546875,164.54296875,62.6875,237361,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
multiple_status_or_gist,gist,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.2995004653930664,0.0,0.0,0.0,102.515625,164.484375,61.96875,237361,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
multiple_status_or_reverse,reverse,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.29596447944641113,0.0,0.0,0.0,103.5078125,164.328125,60.8203125,237361,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
order_status_analysis,bitmap,"SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS average_order_value, MIN(order_date) AS earliest_order, MAX(order_date) AS latest_order FROM Orders WHERE status IN ('Pending', 'Shipped', 'Delivered') AND order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY status ORDER BY order_count DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.027490615844726562,0.0,0.0,0.0,104.484375,104.484375,0.0,3,1,0,0,0,0,0,0,0,1,1,1,0,0,1,3,0,
order_status_analysis_btree,btree,"SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS average_order_value, MIN(order_date) AS earliest_order, MAX(order_date) AS latest_order FROM Orders WHERE status IN ('Pending', 'Shipped', 'Delivered') AND order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY status ORDER BY order_count DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.014980077743530273,0.0,0.0,0.0,104.484375,104.484375,0.0,3,1,0,0,0,0,0,0,0,1,1,1,0,0,1,3,0,
order_status_analysis_hash,hash,"SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS average_order_value, MIN(order_date) AS earliest_order, MAX(order_date) AS latest_order FROM Orders WHERE status IN ('Pending', 'Shipped', 'Delivered') AND order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY status ORDER BY order_count DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.02724623680114746,0.0,0.0,0.0,104.484375,104.484375,0.0,3,1,0,0,0,0,0,0,0,1,1,1,0,0,1,3,0,
order_status_analysis_gist,gist,"SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS average_order_value, MIN(order_date) AS earliest_order, MAX(order_date) AS latest_order FROM Orders WHERE status IN ('Pending', 'Shipped', 'Delivered') AND order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY status ORDER BY order_count DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.01887679100036621,0.0,0.0,0.0,104.484375,104.484375,0.0,3,1,0,0,0,0,0,0,0,1,1,1,0,0,1,3,0,
order_status_analysis_reverse,reverse,"SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS average_order_value, MIN(order_date) AS earliest_order, MAX(order_date) AS latest_order FROM Orders WHERE status IN ('Pending', 'Shipped', 'Delivered') AND order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY status ORDER BY order_count DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.02801036834716797,0.0,0.0,0.0,104.484375,104.484375,0.0,3,1,0,0,0,0,0,0,0,1,1,1,0,0,1,3,0,
order_status_by_month,bitmap,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as order_count, SUM(total_amount) as total_revenue, AVG(total_amount) as avg_order_value FROM orders WHERE status IN ('Pending', 'Shipped', 'Delivered') GROUP BY month, status ORDER BY month DESC, status;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.12657618522644043,0.0,0.0,0.0,104.484375,104.484375,0.0,324,1,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,
order_status_by_month_btree,btree,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as order_count, SUM(total_amount) as total_revenue, AVG(total_amount) as avg_order_value FROM orders WHERE status IN ('Pending', 'Shipped', 'Delivered') GROUP BY month, status ORDER BY month DESC, status;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.12761831283569336,0.0,0.0,0.0,104.484375,104.484375,0.0,324,1,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,
order_status_by_month_hash,hash,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as order_count, SUM(total_amount) as total_revenue, AVG(total_amount) as avg_order_value FROM orders WHERE status IN ('Pending', 'Shipped', 'Delivered') GROUP BY month, status ORDER BY month DESC, status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.12893176078796387,0.0,0.0,0.0,104.484375,104.484375,0.0,324,1,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,
order_status_by_month_gist,gist,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as order_count, SUM(total_amount) as total_revenue, AVG(total_amount) as avg_order_value FROM orders WHERE status IN ('Pending', 'Shipped', 'Delivered') GROUP BY month, status ORDER BY month DESC, status;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.12406325340270996,0.0,0.0,0.0,104.484375,104.484375,0.0,324,1,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,
order_status_by_month_reverse,reverse,"SELECT DATE_TRUNC('month', order_date) as month, status, COUNT(*) as order_count, SUM(total_amount) as total_revenue, AVG(total_amount) as avg_order_value FROM orders WHERE status IN ('Pending', 'Shipped', 'Delivered') GROUP BY month, status ORDER BY month DESC, status;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.12782883644104004,0.0,0.0,0.0,104.484375,104.484375,0.0,324,1,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,
order_status_query,bitmap,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Delivered';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.1463162899017334,0.0,0.0,0.0,104.484375,126.36328125,21.87890625,118757,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
order_status_query_btree,btree,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Delivered';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.1531050205230713,0.0,0.0,0.0,105.95703125,126.33984375,20.3828125,118757,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
order_status_query_hash,hash,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Delivered';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.16930913925170898,0.0,0.0,0.0,107.0390625,126.1875,19.1484375,118757,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
order_status_query_gist,gist,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Delivered';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.160569429397583,0.0,0.0,0.0,108.9453125,126.0234375,17.078125,118757,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
order_status_query_reverse,reverse,"SELECT order_id, user_id, order_date, status FROM Orders WHERE status = 'Delivered';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.15691900253295898,0.0,0.0,0.0,109.953125,126.3671875,16.4140625,118757,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
order_status_summary,bitmap,"SELECT status, COUNT(*) as order_count, SUM(total_amount) as total_revenue FROM orders GROUP BY status ORDER BY order_count DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.04608035087585449,0.0,0.0,0.0,110.07421875,110.07421875,0.0,4,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
order_status_summary_btree,btree,"SELECT status, COUNT(*) as order_count, SUM(total_amount) as total_revenue FROM orders GROUP BY status ORDER BY order_count DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.047406911849975586,0.0,0.0,0.0,110.07421875,110.07421875,0.0,4,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
order_status_summary_hash,hash,"SELECT status, COUNT(*) as order_count, SUM(total_amount) as total_revenue FROM orders GROUP BY status ORDER BY order_count DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.04906296730041504,0.0,0.0,0.0,110.07421875,110.07421875,0.0,4,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
order_status_summary_gist,gist,"SELECT status, COUNT(*) as order_count, SUM(total_amount) as total_revenue FROM orders GROUP BY status ORDER BY order_count DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0558934211730957,0.0,0.0,0.0,110.07421875,110.07421875,0.0,4,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
order_status_summary_reverse,reverse,"SELECT status, COUNT(*) as order_count, SUM(total_amount) as total_revenue FROM orders GROUP BY status ORDER BY order_count DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.046353816986083984,0.0,0.0,0.0,110.07421875,110.07421875,0.0,4,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,
product_performance_analysis,bitmap,"SELECT p.product_id, p.name, c.name AS category_name, SUM(oi.quantity) AS total_units_sold, SUM(oi.quantity * oi.price) AS total_revenue, AVG(oi.price) AS avg_selling_price, COUNT(DISTINCT o.order_id) AS appearance_in_orders, COUNT(DISTINCT o.user_id) AS unique_customers, SUM(oi.quantity) / COUNT(DISTINCT o.order_id) AS avg_quantity_per_order, SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) AS cancelled_units, (SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) / NULLIF(SUM(oi.quantity), 0)) * 100 AS cancellation_rate, RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(oi.quantity) DESC) AS rank_in_category, PERCENT_RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) AS percentile_rank_overall FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, c.name, c.category_id ORDER BY total_revenue DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),2.995154619216919,0.0,0.0,0.0,110.07421875,110.7109375,0.63671875,2000,1,0,0,0,0,0,0,3,0,1,3,0,0,0,9,0,
product_performance_analysis_btree,btree,"SELECT p.product_id, p.name, c.name AS category_name, SUM(oi.quantity) AS total_units_sold, SUM(oi.quantity * oi.price) AS total_revenue, AVG(oi.price) AS avg_selling_price, COUNT(DISTINCT o.order_id) AS appearance_in_orders, COUNT(DISTINCT o.user_id) AS unique_customers, SUM(oi.quantity) / COUNT(DISTINCT o.order_id) AS avg_quantity_per_order, SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) AS cancelled_units, (SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) / NULLIF(SUM(oi.quantity), 0)) * 100 AS cancellation_rate, RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(oi.quantity) DESC) AS rank_in_category, PERCENT_RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) AS percentile_rank_overall FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, c.name, c.category_id ORDER BY total_revenue DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),2.555850028991699,0.0,0.0,0.0,110.7109375,110.7109375,0.0,2000,1,0,0,0,0,0,0,3,0,1,3,0,0,0,9,0,
product_performance_analysis_hash,hash,"SELECT p.product_id, p.name, c.name AS category_name, SUM(oi.quantity) AS total_units_sold, SUM(oi.quantity * oi.price) AS total_revenue, AVG(oi.price) AS avg_selling_price, COUNT(DISTINCT o.order_id) AS appearance_in_orders, COUNT(DISTINCT o.user_id) AS unique_customers, SUM(oi.quantity) / COUNT(DISTINCT o.order_id) AS avg_quantity_per_order, SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) AS cancelled_units, (SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) / NULLIF(SUM(oi.quantity), 0)) * 100 AS cancellation_rate, RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(oi.quantity) DESC) AS rank_in_category, PERCENT_RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) AS percentile_rank_overall FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, c.name, c.category_id ORDER BY total_revenue DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),2.5670673847198486,0.0,0.0,0.0,110.7109375,110.7109375,0.0,2000,1,0,0,0,0,0,0,3,0,1,3,0,0,0,9,0,
product_performance_analysis_gist,gist,"SELECT p.product_id, p.name, c.name AS category_name, SUM(oi.quantity) AS total_units_sold, SUM(oi.quantity * oi.price) AS total_revenue, AVG(oi.price) AS avg_selling_price, COUNT(DISTINCT o.order_id) AS appearance_in_orders, COUNT(DISTINCT o.user_id) AS unique_customers, SUM(oi.quantity) / COUNT(DISTINCT o.order_id) AS avg_quantity_per_order, SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) AS cancelled_units, (SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) / NULLIF(SUM(oi.quantity), 0)) * 100 AS cancellation_rate, RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(oi.quantity) DESC) AS rank_in_category, PERCENT_RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) AS percentile_rank_overall FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, c.name, c.category_id ORDER BY total_revenue DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),2.5461838245391846,0.0,0.0,0.0,110.7109375,110.7109375,0.0,2000,1,0,0,0,0,0,0,3,0,1,3,0,0,0,9,0,
product_performance_analysis_reverse,reverse,"SELECT p.product_id, p.name, c.name AS category_name, SUM(oi.quantity) AS total_units_sold, SUM(oi.quantity * oi.price) AS total_revenue, AVG(oi.price) AS avg_selling_price, COUNT(DISTINCT o.order_id) AS appearance_in_orders, COUNT(DISTINCT o.user_id) AS unique_customers, SUM(oi.quantity) / COUNT(DISTINCT o.order_id) AS avg_quantity_per_order, SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) AS cancelled_units, (SUM(CASE WHEN o.status = 'Cancelled' THEN oi.quantity ELSE 0 END) / NULLIF(SUM(oi.quantity), 0)) * 100 AS cancellation_rate, RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(oi.quantity) DESC) AS rank_in_category, PERCENT_RANK() OVER (ORDER BY SUM(oi.quantity * oi.price) DESC) AS percentile_rank_overall FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, c.name, c.category_id ORDER BY total_revenue DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),2.5847837924957275,0.0,0.0,0.0,110.7109375,110.7109375,0.0,2000,1,0,0,0,0,0,0,3,0,1,3,0,0,0,9,0,
product_stock_analysis,bitmap,"SELECT c.name as category, CASE WHEN p.stock_quantity = 0 THEN 'Out of Stock' WHEN p.stock_quantity <= 10 THEN 'Critical' WHEN p.stock_quantity <= 50 THEN 'Low' WHEN p.stock_quantity <= 100 THEN 'Medium' ELSE 'High' END as stock_level, COUNT(*) as product_count, SUM(p.stock_quantity) as total_stock FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY c.name, stock_level ORDER BY c.name, stock_level;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0033195018768310547,0.0,0.0,0.0,110.7109375,110.7109375,0.0,77,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
product_stock_analysis_btree,btree,"SELECT c.name as category, CASE WHEN p.stock_quantity = 0 THEN 'Out of Stock' WHEN p.stock_quantity <= 10 THEN 'Critical' WHEN p.stock_quantity <= 50 THEN 'Low' WHEN p.stock_quantity <= 100 THEN 'Medium' ELSE 'High' END as stock_level, COUNT(*) as product_count, SUM(p.stock_quantity) as total_stock FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY c.name, stock_level ORDER BY c.name, stock_level;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.003742218017578125,0.0,0.0,0.0,110.7109375,110.7109375,0.0,77,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
product_stock_analysis_hash,hash,"SELECT c.name as category, CASE WHEN p.stock_quantity = 0 THEN 'Out of Stock' WHEN p.stock_quantity <= 10 THEN 'Critical' WHEN p.stock_quantity <= 50 THEN 'Low' WHEN p.stock_quantity <= 100 THEN 'Medium' ELSE 'High' END as stock_level, COUNT(*) as product_count, SUM(p.stock_quantity) as total_stock FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY c.name, stock_level ORDER BY c.name, stock_level;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0033528804779052734,0.0,0.0,0.0,110.7109375,110.7109375,0.0,77,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
product_stock_analysis_gist,gist,"SELECT c.name as category, CASE WHEN p.stock_quantity = 0 THEN 'Out of Stock' WHEN p.stock_quantity <= 10 THEN 'Critical' WHEN p.stock_quantity <= 50 THEN 'Low' WHEN p.stock_quantity <= 100 THEN 'Medium' ELSE 'High' END as stock_level, COUNT(*) as product_count, SUM(p.stock_quantity) as total_stock FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY c.name, stock_level ORDER BY c.name, stock_level;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.004403829574584961,0.0,0.0,0.0,110.7109375,110.7109375,0.0,77,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
product_stock_analysis_reverse,reverse,"SELECT c.name as category, CASE WHEN p.stock_quantity = 0 THEN 'Out of Stock' WHEN p.stock_quantity <= 10 THEN 'Critical' WHEN p.stock_quantity <= 50 THEN 'Low' WHEN p.stock_quantity <= 100 THEN 'Medium' ELSE 'High' END as stock_level, COUNT(*) as product_count, SUM(p.stock_quantity) as total_stock FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY c.name, stock_level ORDER BY c.name, stock_level;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0042858123779296875,0.0,0.0,0.0,110.7109375,110.7109375,0.0,77,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,
stock_status,bitmap,"SELECT CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity < 50 THEN 'Medium Stock' ELSE 'Well Stocked' END as stock_status, COUNT(*) as product_count FROM products GROUP BY stock_status;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.005173206329345703,0.0,0.0,0.0,110.7109375,110.7109375,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
stock_status_btree,btree,"SELECT CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity < 50 THEN 'Medium Stock' ELSE 'Well Stocked' END as stock_status, COUNT(*) as product_count FROM products GROUP BY stock_status;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.00595855712890625,0.0,0.0,0.0,110.7109375,110.7109375,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
stock_status_hash,hash,"SELECT CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity < 50 THEN 'Medium Stock' ELSE 'Well Stocked' END as stock_status, COUNT(*) as product_count FROM products GROUP BY stock_status;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0019137859344482422,0.0,0.0,0.0,110.7109375,110.7109375,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
stock_status_gist,gist,"SELECT CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity < 50 THEN 'Medium Stock' ELSE 'Well Stocked' END as stock_status, COUNT(*) as product_count FROM products GROUP BY stock_status;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0061762332916259766,0.0,0.0,0.0,110.7109375,110.7109375,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
stock_status_reverse,reverse,"SELECT CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity < 50 THEN 'Medium Stock' ELSE 'Well Stocked' END as stock_status, COUNT(*) as product_count FROM products GROUP BY stock_status;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.008634328842163086,0.0,0.0,0.0,110.7109375,110.7109375,0.0,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
address_ending,reverse,"SELECT user_id, shipping_address FROM users WHERE shipping_address LIKE '%NY 10001';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.006486415863037109,0.0,0.0,0.0,110.7109375,110.7109375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_ending_btree,btree,"SELECT user_id, shipping_address FROM users WHERE shipping_address LIKE '%NY 10001';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.002683401107788086,0.0,0.0,0.0,110.7109375,110.7109375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_ending_hash,hash,"SELECT user_id, shipping_address FROM users WHERE shipping_address LIKE '%NY 10001';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0031397342681884766,0.0,0.0,0.0,110.7109375,110.7109375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_ending_bitmap,bitmap,"SELECT user_id, shipping_address FROM users WHERE shipping_address LIKE '%NY 10001';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0031461715698242188,0.0,0.0,0.0,110.7109375,110.7109375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_ending_gist,gist,"SELECT user_id, shipping_address FROM users WHERE shipping_address LIKE '%NY 10001';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0019176006317138672,0.0,0.0,0.0,110.7109375,110.7109375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_postal_search,reverse,"SELECT SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC; SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""LIMIT""
LINE 1: ...AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) a...
                                                             ^
"
address_postal_search_btree,btree,"SELECT SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC; SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""LIMIT""
LINE 1: ...AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) a...
                                                             ^
"
address_postal_search_hash,hash,"SELECT SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC; SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""LIMIT""
LINE 1: ...AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) a...
                                                             ^
"
address_postal_search_bitmap,bitmap,"SELECT SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC; SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""LIMIT""
LINE 1: ...AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) a...
                                                             ^
"
address_postal_search_gist,gist,"SELECT SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC; SUBSTRING(shipping_address FROM '\d{5}$') as postal_code, COUNT(*) as customer_count, STRING_AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) as sample_customers FROM users WHERE shipping_address ~ '\d{5}$' GROUP BY postal_code ORDER BY customer_count DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""LIMIT""
LINE 1: ...AGG(DISTINCT first_name || ' ' || last_name, ', ' LIMIT 5) a...
                                                             ^
"
customer_domain_analysis,reverse,"SELECT SUBSTRING(email FROM '@(.*)$') as email_domain, COUNT(*) as user_count, COUNT(DISTINCT o.order_id) as total_orders, SUM(o.total_amount) as total_revenue FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY email_domain ORDER BY user_count DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),1.3830454349517822,0.0,0.0,0.0,110.7109375,110.7109375,0.0,3,1,0,0,0,0,0,0,1,0,1,1,0,0,0,5,0,
customer_domain_analysis_btree,btree,"SELECT SUBSTRING(email FROM '@(.*)$') as email_domain, COUNT(*) as user_count, COUNT(DISTINCT o.order_id) as total_orders, SUM(o.total_amount) as total_revenue FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY email_domain ORDER BY user_count DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),1.389068841934204,0.0,0.0,0.0,110.7109375,110.7109375,0.0,3,1,0,0,0,0,0,0,1,0,1,1,0,0,0,5,0,
customer_domain_analysis_hash,hash,"SELECT SUBSTRING(email FROM '@(.*)$') as email_domain, COUNT(*) as user_count, COUNT(DISTINCT o.order_id) as total_orders, SUM(o.total_amount) as total_revenue FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY email_domain ORDER BY user_count DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),1.3678984642028809,0.0,0.0,0.0,110.7109375,110.7109375,0.0,3,1,0,0,0,0,0,0,1,0,1,1,0,0,0,5,0,
customer_domain_analysis_bitmap,bitmap,"SELECT SUBSTRING(email FROM '@(.*)$') as email_domain, COUNT(*) as user_count, COUNT(DISTINCT o.order_id) as total_orders, SUM(o.total_amount) as total_revenue FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY email_domain ORDER BY user_count DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),1.3894002437591553,0.0,0.0,0.0,110.7109375,110.7109375,0.0,3,1,0,0,0,0,0,0,1,0,1,1,0,0,0,5,0,
customer_domain_analysis_gist,gist,"SELECT SUBSTRING(email FROM '@(.*)$') as email_domain, COUNT(*) as user_count, COUNT(DISTINCT o.order_id) as total_orders, SUM(o.total_amount) as total_revenue FROM users u LEFT JOIN orders o ON u.user_id = o.user_id GROUP BY email_domain ORDER BY user_count DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),1.402245044708252,0.0,0.0,0.0,110.7109375,110.7109375,0.0,3,1,0,0,0,0,0,0,1,0,1,1,0,0,0,5,0,
email_domain_search,reverse,"SELECT user_id, email, first_name, last_name FROM users WHERE email LIKE '%@gmail.com';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0028717517852783203,0.0,0.0,0.0,110.7109375,110.7109375,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
email_domain_search_btree,btree,"SELECT user_id, email, first_name, last_name FROM users WHERE email LIKE '%@gmail.com';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.005196571350097656,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
email_domain_search_hash,hash,"SELECT user_id, email, first_name, last_name FROM users WHERE email LIKE '%@gmail.com';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.003025531768798828,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
email_domain_search_bitmap,bitmap,"SELECT user_id, email, first_name, last_name FROM users WHERE email LIKE '%@gmail.com';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0057904720306396484,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
email_domain_search_gist,gist,"SELECT user_id, email, first_name, last_name FROM users WHERE email LIKE '%@gmail.com';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.005555391311645508,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
inactive_users,reverse,"SELECT u.user_id, u.first_name, u.last_name, u.email, u.created_at AS registration_date, MAX(o.order_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) AS days_since_last_order, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS lifetime_value, SUM(o.total_amount) / COUNT(DISTINCT o.order_id) AS average_order_value FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.first_name, u.last_name, u.email, u.created_at HAVING MAX(o.order_date) IS NULL OR DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) > 90 ORDER BY days_since_last_order DESC NULLS FIRST;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""(""
LINE 1: ...er_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o....
                                                             ^
"
inactive_users_btree,btree,"SELECT u.user_id, u.first_name, u.last_name, u.email, u.created_at AS registration_date, MAX(o.order_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) AS days_since_last_order, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS lifetime_value, SUM(o.total_amount) / COUNT(DISTINCT o.order_id) AS average_order_value FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.first_name, u.last_name, u.email, u.created_at HAVING MAX(o.order_date) IS NULL OR DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) > 90 ORDER BY days_since_last_order DESC NULLS FIRST;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""(""
LINE 1: ...er_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o....
                                                             ^
"
inactive_users_hash,hash,"SELECT u.user_id, u.first_name, u.last_name, u.email, u.created_at AS registration_date, MAX(o.order_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) AS days_since_last_order, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS lifetime_value, SUM(o.total_amount) / COUNT(DISTINCT o.order_id) AS average_order_value FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.first_name, u.last_name, u.email, u.created_at HAVING MAX(o.order_date) IS NULL OR DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) > 90 ORDER BY days_since_last_order DESC NULLS FIRST;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""(""
LINE 1: ...er_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o....
                                                             ^
"
inactive_users_bitmap,bitmap,"SELECT u.user_id, u.first_name, u.last_name, u.email, u.created_at AS registration_date, MAX(o.order_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) AS days_since_last_order, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS lifetime_value, SUM(o.total_amount) / COUNT(DISTINCT o.order_id) AS average_order_value FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.first_name, u.last_name, u.email, u.created_at HAVING MAX(o.order_date) IS NULL OR DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) > 90 ORDER BY days_since_last_order DESC NULLS FIRST;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""(""
LINE 1: ...er_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o....
                                                             ^
"
inactive_users_gist,gist,"SELECT u.user_id, u.first_name, u.last_name, u.email, u.created_at AS registration_date, MAX(o.order_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) AS days_since_last_order, COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS lifetime_value, SUM(o.total_amount) / COUNT(DISTINCT o.order_id) AS average_order_value FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_id, u.first_name, u.last_name, u.email, u.created_at HAVING MAX(o.order_date) IS NULL OR DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) > 90 ORDER BY days_since_last_order DESC NULLS FIRST;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"syntax error at or near ""(""
LINE 1: ...er_date) AS last_order_date, DATEDIFF(CURRENT_DATE(), MAX(o....
                                                             ^
"
multi_table_query,reverse,"SELECT o.order_id, o.order_date, u.email FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE o.order_id = 45678;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.007380962371826172,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
multi_table_query_btree,btree,"SELECT o.order_id, o.order_date, u.email FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE o.order_id = 45678;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0053615570068359375,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
multi_table_query_hash,hash,"SELECT o.order_id, o.order_date, u.email FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE o.order_id = 45678;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.005370616912841797,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
multi_table_query_bitmap,bitmap,"SELECT o.order_id, o.order_date, u.email FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE o.order_id = 45678;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0023622512817382812,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
multi_table_query_gist,gist,"SELECT o.order_id, o.order_date, u.email FROM Orders o JOIN Users u ON o.user_id = u.user_id WHERE o.order_id = 45678;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0038056373596191406,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,
numeric_id_query,reverse,"SELECT user_id, first_name, last_name, email FROM Users WHERE user_id = 1233;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0020248889923095703,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
numeric_id_query_btree,btree,"SELECT user_id, first_name, last_name, email FROM Users WHERE user_id = 1233;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.001965761184692383,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
numeric_id_query_hash,hash,"SELECT user_id, first_name, last_name, email FROM Users WHERE user_id = 1233;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0054509639739990234,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
numeric_id_query_bitmap,bitmap,"SELECT user_id, first_name, last_name, email FROM Users WHERE user_id = 1233;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.006437063217163086,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
numeric_id_query_gist,gist,"SELECT user_id, first_name, last_name, email FROM Users WHERE user_id = 1233;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.005522251129150391,0.0,0.0,0.0,110.7265625,110.7265625,0.0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
phone_area_code,reverse,"SELECT user_id, phone_number, email FROM users WHERE phone_number LIKE '212%';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.004205465316772461,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
phone_area_code_btree,btree,"SELECT user_id, phone_number, email FROM users WHERE phone_number LIKE '212%';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0069561004638671875,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
phone_area_code_hash,hash,"SELECT user_id, phone_number, email FROM users WHERE phone_number LIKE '212%';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0063610076904296875,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
phone_area_code_bitmap,bitmap,"SELECT user_id, phone_number, email FROM users WHERE phone_number LIKE '212%';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.00654292106628418,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
phone_area_code_gist,gist,"SELECT user_id, phone_number, email FROM users WHERE phone_number LIKE '212%';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0031740665435791016,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
product_model_search,reverse,"SELECT p.product_id, p.name, p.price, p.stock_quantity, COUNT(oi.order_item_id) as times_ordered FROM products p LEFT JOIN orderitems oi ON p.product_id = oi.product_id WHERE p.name LIKE '% 2023' GROUP BY p.product_id, p.name, p.price, p.stock_quantity;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.006700277328491211,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,
product_model_search_btree,btree,"SELECT p.product_id, p.name, p.price, p.stock_quantity, COUNT(oi.order_item_id) as times_ordered FROM products p LEFT JOIN orderitems oi ON p.product_id = oi.product_id WHERE p.name LIKE '% 2023' GROUP BY p.product_id, p.name, p.price, p.stock_quantity;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.001873016357421875,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,
product_model_search_hash,hash,"SELECT p.product_id, p.name, p.price, p.stock_quantity, COUNT(oi.order_item_id) as times_ordered FROM products p LEFT JOIN orderitems oi ON p.product_id = oi.product_id WHERE p.name LIKE '% 2023' GROUP BY p.product_id, p.name, p.price, p.stock_quantity;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.00243377685546875,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,
product_model_search_bitmap,bitmap,"SELECT p.product_id, p.name, p.price, p.stock_quantity, COUNT(oi.order_item_id) as times_ordered FROM products p LEFT JOIN orderitems oi ON p.product_id = oi.product_id WHERE p.name LIKE '% 2023' GROUP BY p.product_id, p.name, p.price, p.stock_quantity;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.002507448196411133,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,
product_model_search_gist,gist,"SELECT p.product_id, p.name, p.price, p.stock_quantity, COUNT(oi.order_item_id) as times_ordered FROM products p LEFT JOIN orderitems oi ON p.product_id = oi.product_id WHERE p.name LIKE '% 2023' GROUP BY p.product_id, p.name, p.price, p.stock_quantity;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.00496363639831543,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,
product_name_suffix,reverse,"SELECT product_id, name, price FROM products WHERE name LIKE '%Pro';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.005540370941162109,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
product_name_suffix_btree,btree,"SELECT product_id, name, price FROM products WHERE name LIKE '%Pro';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0019593238830566406,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
product_name_suffix_hash,hash,"SELECT product_id, name, price FROM products WHERE name LIKE '%Pro';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0021331310272216797,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
product_name_suffix_bitmap,bitmap,"SELECT product_id, name, price FROM products WHERE name LIKE '%Pro';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0061876773834228516,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
product_name_suffix_gist,gist,"SELECT product_id, name, price FROM products WHERE name LIKE '%Pro';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0021071434020996094,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
range_id_query,reverse,"SELECT order_id, order_date, status FROM Orders WHERE order_id BETWEEN 5000 AND 5100;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.0020797252655029297,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,
range_id_query_btree,btree,"SELECT order_id, order_date, status FROM Orders WHERE order_id BETWEEN 5000 AND 5100;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.0015559196472167969,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,
range_id_query_hash,hash,"SELECT order_id, order_date, status FROM Orders WHERE order_id BETWEEN 5000 AND 5100;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.0022242069244384766,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,
range_id_query_bitmap,bitmap,"SELECT order_id, order_date, status FROM Orders WHERE order_id BETWEEN 5000 AND 5100;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.005080223083496094,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,
range_id_query_gist,gist,"SELECT order_id, order_date, status FROM Orders WHERE order_id BETWEEN 5000 AND 5100;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0018875598907470703,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,
timestamp_query,reverse,"SELECT order_id, user_id, order_date, status FROM Orders WHERE order_date = '2024-03-15';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.02410435676574707,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
timestamp_query_btree,btree,"SELECT order_id, user_id, order_date, status FROM Orders WHERE order_date = '2024-03-15';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.00746607780456543,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
timestamp_query_hash,hash,"SELECT order_id, user_id, order_date, status FROM Orders WHERE order_date = '2024-03-15';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.026762008666992188,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
timestamp_query_bitmap,bitmap,"SELECT order_id, user_id, order_date, status FROM Orders WHERE order_date = '2024-03-15';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.023616313934326172,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
timestamp_query_gist,gist,"SELECT order_id, user_id, order_date, status FROM Orders WHERE order_date = '2024-03-15';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.006815671920776367,0.0,0.0,0.0,110.7265625,110.7265625,0.0,101,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
address_search,gist,"SELECT user_id, first_name, last_name, shipping_address FROM users WHERE shipping_address ILIKE '%New York%';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.002504110336303711,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_search_btree,btree,"SELECT user_id, first_name, last_name, shipping_address FROM users WHERE shipping_address ILIKE '%New York%';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.013002872467041016,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_search_hash,hash,"SELECT user_id, first_name, last_name, shipping_address FROM users WHERE shipping_address ILIKE '%New York%';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.013567686080932617,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_search_bitmap,bitmap,"SELECT user_id, first_name, last_name, shipping_address FROM users WHERE shipping_address ILIKE '%New York%';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.00875091552734375,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
address_search_reverse,reverse,"SELECT user_id, first_name, last_name, shipping_address FROM users WHERE shipping_address ILIKE '%New York%';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.012376546859741211,0.0,0.0,0.0,110.7265625,110.7265625,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,
complex_range_query,gist,"SELECT order_id, user_id, order_date, shipping_address FROM Orders WHERE shipping_address ILIKE '%usa%';  -- Changed to ILIKE for case-insensitive substring search",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.1385822296142578,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2436,1,0,0,0,0,0,0,0,1,0,0,0,0,0,4,2,
complex_range_query_btree,btree,"SELECT order_id, user_id, order_date, shipping_address FROM Orders WHERE shipping_address ILIKE '%usa%';  -- Changed to ILIKE for case-insensitive substring search",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.12249445915222168,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2436,1,0,0,0,0,0,0,0,1,0,0,0,0,0,4,2,
complex_range_query_hash,hash,"SELECT order_id, user_id, order_date, shipping_address FROM Orders WHERE shipping_address ILIKE '%usa%';  -- Changed to ILIKE for case-insensitive substring search",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.12763762474060059,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2436,1,0,0,0,0,0,0,0,1,0,0,0,0,0,4,2,
complex_range_query_bitmap,bitmap,"SELECT order_id, user_id, order_date, shipping_address FROM Orders WHERE shipping_address ILIKE '%usa%';  -- Changed to ILIKE for case-insensitive substring search",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.1574249267578125,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2436,1,0,0,0,0,0,0,0,1,0,0,0,0,0,4,2,
complex_range_query_reverse,reverse,"SELECT order_id, user_id, order_date, shipping_address FROM Orders WHERE shipping_address ILIKE '%usa%';  -- Changed to ILIKE for case-insensitive substring search",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.13163328170776367,0.0,0.0,0.0,110.7265625,110.7265625,0.0,2436,1,0,0,0,0,0,0,0,1,0,0,0,0,0,4,2,
customer_location_search,gist,"SELECT u.user_id, u.first_name, u.last_name, u.shipping_address, COUNT(o.order_id) as total_orders, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id WHERE u.shipping_address ILIKE '%California%' GROUP BY u.user_id, u.first_name, u.last_name, u.shipping_address;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.0021533966064453125,0.0,0.0,0.0,109.7265625,109.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,4,1,
customer_location_search_btree,btree,"SELECT u.user_id, u.first_name, u.last_name, u.shipping_address, COUNT(o.order_id) as total_orders, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id WHERE u.shipping_address ILIKE '%California%' GROUP BY u.user_id, u.first_name, u.last_name, u.shipping_address;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.018050193786621094,0.0,0.0,0.0,109.7265625,109.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,4,1,
customer_location_search_hash,hash,"SELECT u.user_id, u.first_name, u.last_name, u.shipping_address, COUNT(o.order_id) as total_orders, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id WHERE u.shipping_address ILIKE '%California%' GROUP BY u.user_id, u.first_name, u.last_name, u.shipping_address;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.013068437576293945,0.0,0.0,0.0,109.7265625,109.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,4,1,
customer_location_search_bitmap,bitmap,"SELECT u.user_id, u.first_name, u.last_name, u.shipping_address, COUNT(o.order_id) as total_orders, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id WHERE u.shipping_address ILIKE '%California%' GROUP BY u.user_id, u.first_name, u.last_name, u.shipping_address;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.013999700546264648,0.0,0.0,0.0,109.7265625,109.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,4,1,
customer_location_search_reverse,reverse,"SELECT u.user_id, u.first_name, u.last_name, u.shipping_address, COUNT(o.order_id) as total_orders, SUM(o.total_amount) as total_spent FROM users u LEFT JOIN orders o ON u.user_id = o.user_id WHERE u.shipping_address ILIKE '%California%' GROUP BY u.user_id, u.first_name, u.last_name, u.shipping_address;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.01230001449584961,0.0,0.0,0.0,109.7265625,109.7265625,0.0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,4,1,
full_text_search,gist,"SELECT product_id, name, description FROM Products WHERE to_tsvector('english', description) @@ to_tsquery('english', 'oil');",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.047670602798461914,0.0,0.0,0.0,109.7265625,109.7265625,0.0,53,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
full_text_search_btree,btree,"SELECT product_id, name, description FROM Products WHERE to_tsvector('english', description) @@ to_tsquery('english', 'oil');",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.04209017753601074,0.0,0.0,0.0,109.73046875,109.73046875,0.0,53,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
full_text_search_hash,hash,"SELECT product_id, name, description FROM Products WHERE to_tsvector('english', description) @@ to_tsquery('english', 'oil');",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.03914666175842285,0.0,0.0,0.0,109.73046875,109.73046875,0.0,53,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
full_text_search_bitmap,bitmap,"SELECT product_id, name, description FROM Products WHERE to_tsvector('english', description) @@ to_tsquery('english', 'oil');",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.04430794715881348,0.0,0.0,0.0,109.73046875,109.73046875,0.0,53,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
full_text_search_reverse,reverse,"SELECT product_id, name, description FROM Products WHERE to_tsvector('english', description) @@ to_tsquery('english', 'oil');",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.041468143463134766,0.0,0.0,0.0,109.73046875,109.73046875,0.0,53,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
fuzzy_product_search,gist,"SELECT product_id, name, price FROM products WHERE name % 'wireless headphones';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.006170988082885742,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
fuzzy_product_search_btree,btree,"SELECT product_id, name, price FROM products WHERE name % 'wireless headphones';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.005835771560668945,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
fuzzy_product_search_hash,hash,"SELECT product_id, name, price FROM products WHERE name % 'wireless headphones';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.009955883026123047,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
fuzzy_product_search_bitmap,bitmap,"SELECT product_id, name, price FROM products WHERE name % 'wireless headphones';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.00617671012878418,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
fuzzy_product_search_reverse,reverse,"SELECT product_id, name, price FROM products WHERE name % 'wireless headphones';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.005170345306396484,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
product_description_search,gist,"SELECT p.product_id, p.name, p.description, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.description ILIKE '%premium%' OR p.description ILIKE '%quality%' ORDER BY p.price DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.011934757232666016,0.0,0.0,0.0,109.73046875,109.73046875,0.0,46,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,
product_description_search_btree,btree,"SELECT p.product_id, p.name, p.description, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.description ILIKE '%premium%' OR p.description ILIKE '%quality%' ORDER BY p.price DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.011183977127075195,0.0,0.0,0.0,109.73046875,109.73046875,0.0,46,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,
product_description_search_hash,hash,"SELECT p.product_id, p.name, p.description, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.description ILIKE '%premium%' OR p.description ILIKE '%quality%' ORDER BY p.price DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.01129460334777832,0.0,0.0,0.0,109.73046875,109.73046875,0.0,46,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,
product_description_search_bitmap,bitmap,"SELECT p.product_id, p.name, p.description, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.description ILIKE '%premium%' OR p.description ILIKE '%quality%' ORDER BY p.price DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.011597394943237305,0.0,0.0,0.0,109.73046875,109.73046875,0.0,46,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,
product_description_search_reverse,reverse,"SELECT p.product_id, p.name, p.description, p.price, c.name as category FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.description ILIKE '%premium%' OR p.description ILIKE '%quality%' ORDER BY p.price DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.012759208679199219,0.0,0.0,0.0,109.73046875,109.73046875,0.0,46,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,2,
product_search,gist,"SELECT product_id, name, description, price FROM products WHERE name ILIKE '%wireless%' OR description ILIKE '%wireless%';",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.00585174560546875,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,
product_search_btree,btree,"SELECT product_id, name, description, price FROM products WHERE name ILIKE '%wireless%' OR description ILIKE '%wireless%';",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.010302305221557617,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,
product_search_hash,hash,"SELECT product_id, name, description, price FROM products WHERE name ILIKE '%wireless%' OR description ILIKE '%wireless%';",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.007997512817382812,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,
product_search_bitmap,bitmap,"SELECT product_id, name, description, price FROM products WHERE name ILIKE '%wireless%' OR description ILIKE '%wireless%';",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.006943225860595703,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,
product_search_reverse,reverse,"SELECT product_id, name, description, price FROM products WHERE name ILIKE '%wireless%' OR description ILIKE '%wireless%';",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.006135702133178711,0.0,0.0,0.0,109.73046875,109.73046875,0.0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,
similar_category_products,gist,"SELECT DISTINCT p1.name as product1, p2.name as product2, p1.price as price1, p2.price as price2, similarity(p1.name, p2.name) as name_similarity FROM products p1 JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id WHERE similarity(p1.name, p2.name) > 0.4 ORDER BY name_similarity DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.1371762752532959,0.0,0.0,0.0,109.73046875,109.73046875,0.0,47,1,0,0,0,0,0,0,1,1,0,1,0,0,0,2,0,
similar_category_products_btree,btree,"SELECT DISTINCT p1.name as product1, p2.name as product2, p1.price as price1, p2.price as price2, similarity(p1.name, p2.name) as name_similarity FROM products p1 JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id WHERE similarity(p1.name, p2.name) > 0.4 ORDER BY name_similarity DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.1356639862060547,0.0,0.0,0.0,109.73046875,109.73046875,0.0,47,1,0,0,0,0,0,0,1,1,0,1,0,0,0,2,0,
similar_category_products_hash,hash,"SELECT DISTINCT p1.name as product1, p2.name as product2, p1.price as price1, p2.price as price2, similarity(p1.name, p2.name) as name_similarity FROM products p1 JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id WHERE similarity(p1.name, p2.name) > 0.4 ORDER BY name_similarity DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.14208769798278809,0.0,0.0,0.0,109.73046875,109.73046875,0.0,47,1,0,0,0,0,0,0,1,1,0,1,0,0,0,2,0,
similar_category_products_bitmap,bitmap,"SELECT DISTINCT p1.name as product1, p2.name as product2, p1.price as price1, p2.price as price2, similarity(p1.name, p2.name) as name_similarity FROM products p1 JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id WHERE similarity(p1.name, p2.name) > 0.4 ORDER BY name_similarity DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.13686275482177734,0.0,0.0,0.0,109.73046875,109.73046875,0.0,47,1,0,0,0,0,0,0,1,1,0,1,0,0,0,2,0,
similar_category_products_reverse,reverse,"SELECT DISTINCT p1.name as product1, p2.name as product2, p1.price as price1, p2.price as price2, similarity(p1.name, p2.name) as name_similarity FROM products p1 JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id WHERE similarity(p1.name, p2.name) > 0.4 ORDER BY name_similarity DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.13402152061462402,0.0,0.0,0.0,109.73046875,109.73046875,0.0,47,1,0,0,0,0,0,0,1,1,0,1,0,0,0,2,0,
similar_products,gist,"SELECT p1.product_id, p1.name, p1.description FROM products p1, products p2 WHERE p1.product_id != p2.product_id AND similarity(p1.name, p2.name) > 0.3 ORDER BY similarity(p1.name, p2.name) DESC;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),4.7928712368011475,0.0,0.0,0.0,109.73046875,110.14453125,0.4140625,3848,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
similar_products_btree,btree,"SELECT p1.product_id, p1.name, p1.description FROM products p1, products p2 WHERE p1.product_id != p2.product_id AND similarity(p1.name, p2.name) > 0.3 ORDER BY similarity(p1.name, p2.name) DESC;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),4.75930118560791,0.0,0.0,0.0,110.14453125,110.14453125,0.0,3848,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
similar_products_hash,hash,"SELECT p1.product_id, p1.name, p1.description FROM products p1, products p2 WHERE p1.product_id != p2.product_id AND similarity(p1.name, p2.name) > 0.3 ORDER BY similarity(p1.name, p2.name) DESC;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),4.736252546310425,0.0,0.0,0.0,110.14453125,110.1171875,-0.02734375,3848,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
similar_products_bitmap,bitmap,"SELECT p1.product_id, p1.name, p1.description FROM products p1, products p2 WHERE p1.product_id != p2.product_id AND similarity(p1.name, p2.name) > 0.3 ORDER BY similarity(p1.name, p2.name) DESC;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),4.763002157211304,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3848,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
similar_products_reverse,reverse,"SELECT p1.product_id, p1.name, p1.description FROM products p1, products p2 WHERE p1.product_id != p2.product_id AND similarity(p1.name, p2.name) > 0.3 ORDER BY similarity(p1.name, p2.name) DESC;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),4.728536367416382,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3848,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
trigram_match,gist,"select * from (SELECT product_id, name, description FROM Products WHERE 'heavy' % name) pind;",GiST index for complex data types,CREATE INDEX gist_orders_date ON Orders USING GIST (order_date); CREATE INDEX gist_products_name ON Products USING GIST (name gist_trgm_ops); CREATE INDEX gist_users_address ON Users USING GIST (shipping_address gist_trgm_ops),0.002079486846923828,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
trigram_match_btree,btree,"select * from (SELECT product_id, name, description FROM Products WHERE 'heavy' % name) pind;",B-Tree index for range queries and sorting,CREATE INDEX btree_orders_date ON Orders (order_date); CREATE INDEX btree_orders_user ON Orders (user_id); CREATE INDEX btree_products_category ON Products (category_id); CREATE INDEX btree_orderitems_order ON OrderItems (order_id); CREATE INDEX btree_orderitems_product ON OrderItems (product_id),0.007129192352294922,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
trigram_match_hash,hash,"select * from (SELECT product_id, name, description FROM Products WHERE 'heavy' % name) pind;",Hash index for equality comparisons,CREATE INDEX hash_users_email ON Users USING HASH (email); CREATE INDEX hash_products_id ON Products USING HASH (product_id); CREATE INDEX hash_orders_id ON Orders USING HASH (order_id),0.007851839065551758,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
trigram_match_bitmap,bitmap,"select * from (SELECT product_id, name, description FROM Products WHERE 'heavy' % name) pind;",Bitmap index for low-cardinality columns,CREATE INDEX bitmap_orders_status ON Orders (status); CREATE INDEX bitmap_products_category ON Products (category_id); CREATE INDEX bitmap_categories_parent ON Categories (category_id),0.0042896270751953125,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
trigram_match_reverse,reverse,"select * from (SELECT product_id, name, description FROM Products WHERE 'heavy' % name) pind;",Reverse index for reducing concurrency contention,CREATE INDEX rev_users_id ON Users USING REVERSE (user_id); CREATE INDEX rev_orders_date ON Orders USING REVERSE (order_date); CREATE INDEX rev_products_name ON Products USING REVERSE (name),0.004041194915771484,0.0,0.0,0.0,110.1171875,110.1171875,0.0,3,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,
